#!/usr/bin/env python
"""
Obtain cDNA alignments from an Ensembl database.
"""
from __future__ import print_function
import icedbProgSetup  # noqa: F401
import os
import argparse


def parseArgs():
    desc = """Fetch cDNA alignments from Ensembl and load as PSLs in evidence
    sqllite3 database.

    The Ensembl alignments don't include the poly-A and lack the lengths,
    The length of cDNA sequences are obtained from either the UCSC browser
    database.  If they are not available there, are obtained from NCBI eutils
    API and cached in cdnaInfoCacheDb.
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--rootDir', default=".",
                        help="""data root directory""")
    parser.add_argument('--numThreads', type=int,
                        help="number of threads to use")
    parser.add_argument('organism',
                        help="""common name of organism""")
    parser.add_argument('assembly',
                        help="""assembly name""")
    parser.add_argument('geneSet',
                        help="""get set name""")
    parser.add_argument('batchFile',
                        help="""get set name""")
    opts = parser.parse_args()
    return opts


def starSpliceJunctionMapCmd(fh, genomeDir, readsFile, readsFile2, numThreads, sjOut):
    cmd = ["runStarSpliceJunctionMap",
           "--numThreads={}".format(numThreads),
           genomeDir, readsFile]
    if readsFile2 is not None:
        cmd.append("--readsFile2={}".format(readsFile2))
    cmd.append("{{check out exists {} }}".format(sjOut))
    fh.write(" ".join(cmd) + "\n")


def checkGenomeExists(pathConfig, readLength):
    "make sure the genome done flag is there"
    doneFlag = pathConfig.starGenomeDoneFlag(readLength)
    if not os.path.exists(doneFlag):
        raise Exception("STAR genome done flag not found: " + doneFlag)


def maybeMakeSplitJunctionJob(fh, pathConfig, rnaSeqData, numThreads):
    "check if output exists, if not add job to generate it"
    checkGenomeExists(pathConfig, rnaSeqData.readlength)
    sjOut = pathConfig.rnaSeqSetAnalysisSjOut(rnaSeqData.setname, rnaSeqData.runname)
    if not os.path.exists(sjOut):
        readsPath = pathConfig.rnaSeqSetDataFile(rnaSeqData.setname, rnaSeqData.readsfile)
        readsPath2 = pathConfig.rnaSeqSetDataFile(rnaSeqData.setname, rnaSeqData.readsfile2) if rnaSeqData.readsfile2 is not None else None
        starSpliceJunctionMapCmd(fh,
                                 pathConfig.starGenomeDir(rnaSeqData.readlength),
                                 readsPath, readsPath2, numThreads, sjOut)


def createJobs(opts):
    pathConfig = config.PathConfig(opts.rootDir, opts.organism, opts.assembly, opts.geneSet)
    database = SqliteDatabase(pathConfig.dataDatabase())
    setDatabase(database)
    with open(opts.batchFile, "w") as fh:
        for rnaSeqData in RnaSeqData.select().where(RnaSeqData.organism == opts.organism):
            maybeMakeSplitJunctionJob(fh, pathConfig, rnaSeqData, opts.numThreads)


def main():
    opts = parseArgs()
    createJobs(opts)

main()
