#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import argparse
from pycbio.sys import fileOps
from gencode_icedb.gbffProblemCaseParser import GbffProblemCaseParser, Organism

# Note: wanted to do this via eutils, however NCBI can't
# query on clone library


def parseArgs():
    desc = """Scan genbank flat files looking for known problem libraries.
    Should scan:
        gbpri*.seq.gz
        gbrod*.seq.gz
        gbest*.seq.gz
    Since this looks for historic problem submissions, this can be run
    once and the output saved.  This detects the following problems:
      - NEDO libraries - sequencing technique that is often missing internal
        portions of RNA.
      - Athersys RAGE library - induced expression library
      - ORESTES library - PCR clones

   Note that Athersys RAGE and ORESTES flagging are a duplication of what is
   done by the UCSC GenBank pipeline.
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('hsTabOut',
                        help="output for human")
    parser.add_argument('mmTabOut',
                        help="output for mouse")
    parser.add_argument('gbffInputs', nargs="*",
                        help="Genbank Flat Files, maybe compressed")
    return parser.parse_args()


def writeProblemCase(problemCase, hsTabFh, mmTabFh):
    fh = hsTabFh if problemCase.organism == Organism.hs else mmTabFh
    fileOps.prRowv(fh, problemCase.acc, problemCase.reason)


def gbffGetProblemCases(opts):
    problemCases = GbffProblemCaseParser(opts.gbffInputs)
    with open(opts.hsTabOut, "w") as hsTabFh, open(opts.mmTabOut, "w") as mmTabFh:
        for problemEntry in problemCases.problemEntries:
            writeProblemCase(problemEntry, hsTabFh, mmTabFh)

gbffGetProblemCases(parseArgs())
