#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import argparse
from pycbio.hgdata.hgLite import GencodeAttrsDbTable, GencodeTranscriptSourceDbTable, GenePredDbTable, GencodeTranscriptionSupportLevelDbTable, GencodeTagDbTable
from pycbio.hgdata import hgDb
import sqlite3
from gencode_icedb.general import gencodeDb


def parseArgs():
    desc = """Load GENCODE genePreds and attributes into sqlite databases."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--hgdb',
                        help="""load from mysql hgdb instead of files""")
    parser.add_argument('--version',
                        help="""If specified, get construct names from this version, this should include leading V or VM""")
    parser.add_argument('--attrs',
                        help="""TSV file or table of GENCODE attributes""")
    parser.add_argument('--transcriptSource',
                        help="""TSV file or table of GENCODE transcript sources""")
    parser.add_argument('--transcriptionSupportLevel',
                        help="""TSV file or table of GENCODE transcription support level scores""")
    parser.add_argument('--tags',
                        help="""TSV file or table of GENCODE tags""")
    parser.add_argument('--genes',
                        help="""file or table of genePreds to load""")
    parser.add_argument('--pseudoGenes',
                        help="""file or table of pseudo genePreds to load""")
    parser.add_argument('sqliteDb',
                        help="""database to load""")
    opts = parser.parse_args()
    if opts.version is not None:
        if opts.hgdb is None:
            parser.error("--version requires --hgdb")
        if opts.attrs is None:
            opts.attrs = "wgEncodeGencodeAttrs" + opts.version
        if opts.transcriptSource is None:
            opts.transcriptSource = "wgEncodeGencodeTranscriptSource" + opts.version
        if opts.transcriptionSupportLevel is None:
            opts.transcriptionSupportLevel = "wgEncodeGencodeTranscriptionSupportLevel" + opts.version
        if opts.tags is None:
            opts.tags = "wgEncodeGencodeTag" + opts.version
        if opts.genes is None:
            opts.genes = "wgEncodeGencodeComp" + opts.version
        if opts.pseudoGenes is None:
            opts.pseudoGenes = "wgEncodeGencodePseudoGene" + opts.version
    return opts


def loadHgDbTable(hgdbConn, tbl):
    cur = hgdbConn.cursor()
    try:
        cur.execute("SELECT * FROM {}".format(tbl))
        return cur.fetchall()
    finally:
        cur.close()


def loadAnnotations(conn, hgdbConn, genes, pseudoGenes):
    annDbTable = GenePredDbTable(conn, gencodeDb.gencode_ann_table, create=True)
    if hgdbConn is not None:
        if genes is not None:
            annDbTable.loadsWithBin(loadHgDbTable(hgdbConn, genes))
        if pseudoGenes is not None:
            annDbTable.loadsWithBin(loadHgDbTable(hgdbConn, pseudoGenes))
    else:
        if genes is not None:
            annDbTable.loadGenePredFile(genes)
        if pseudoGenes is not None:
            annDbTable.loadGenePredFile(pseudoGenes)


def loadAttrs(conn, hgdbConn, attrs):
    attrsDbTable = GencodeAttrsDbTable(conn, gencodeDb.gencode_attrs_table, create=True)
    if hgdbConn is not None:
        attrsDbTable.loads(loadHgDbTable(hgdbConn, attrs))
    else:
        attrsDbTable.loadTsv(attrs)


def loadTransSource(conn, hgdbConn, transSource):
    transSourceDbTable = GencodeTranscriptSourceDbTable(conn, gencodeDb.gencode_transcript_source_table, create=True)
    if hgdbConn is not None:
        transSourceDbTable.loads(loadHgDbTable(hgdbConn, transSource))
    else:
        transSourceDbTable.loadTsv(transSource)


def loadTransSupportLevel(conn, hgdbConn, transSupportLevel):
    transSourceDbTable = GencodeTranscriptionSupportLevelDbTable(conn, gencodeDb.gencode_transcription_support_level_table, create=True)
    if hgdbConn is not None:
        transSourceDbTable.loads(loadHgDbTable(hgdbConn, transSupportLevel))
    else:
        transSourceDbTable.loadTsv(transSupportLevel)


def loadTags(conn, hgdbConn, tags):
    tagsDbTable = GencodeTagDbTable(conn, gencodeDb.gencode_tag_table, create=True)
    if hgdbConn is not None:
        tagsDbTable.loads(loadHgDbTable(hgdbConn, tags))
    else:
        tagsDbTable.loadTsv(tags)


def gencodeDbLoad(opts):
    "main function"
    conn = sqlite3.connect(opts.sqliteDb)
    hgdbConn = None
    if opts.hgdb is not None:
        hgdbConn = hgDb.connect(opts.hgdb)
    if (opts.genes is not None) or (opts.pseudoGenes is not None):
        loadAnnotations(conn, hgdbConn, opts.genes, opts.pseudoGenes)
    if opts.attrs is not None:
        loadAttrs(conn, hgdbConn, opts.attrs)
    if opts.transcriptSource is not None:
        loadTransSource(conn, hgdbConn, opts.transcriptSource)
    if opts.transcriptionSupportLevel is not None:
        loadTransSupportLevel(conn, hgdbConn, opts.transcriptionSupportLevel)
    if opts.tags is not None:
        loadTags(conn, hgdbConn, opts.tags)
    if hgdbConn is not None:
        hgdbConn.close()
    conn.close()


gencodeDbLoad(parseArgs())
