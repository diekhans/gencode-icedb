#!/usr/bin/env python

import sys
import os
import argparse
sys.path.insert(0, os.path.expanduser("~markd/compbio/code/pycbio/lib"))
sys.path.insert(0, os.path.expanduser("~markd/compbio/ccds/ccds2/output/lib/py"))
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from pycbio.sys import fileOps
from gencode.data.gencodeGenes import GencodeGenes
from gencode_icedb import dataOps
from gencode_icedb.gencodeIntronEvid import GencodeIntronEvidSet, IntronSupportLevel


verbose = False
def parseArgs():
    desc = """Compute per-transcript support levels and annotations from RNA-Seq
    evidence."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--verbose', action="store_true", default=False,
                        help="write verbose output")
    parser.add_argument('gencodeGenePred',
                        help="gencode genePred ")
    parser.add_argument('gencodeAttrTsv',
                        help="GENCODE attributes")
    parser.add_argument('spliceJunctionEvidTsv',
                        help="length of reads that will be mapped; used to calculate splice junction overhang")
    opts = parser.parse_args()
    global verbose
    verbose = opts.verbose
    return opts


class GencodeIntronSupport(object):
    def __init__(self, gencodeGenePred, gencodeAttrTsv, spliceJunctionEvidTsv):
        self.intronEvid = GencodeIntronEvidSet(spliceJunctionEvidTsv)
        self.gencode = GencodeGenes.loadFromFiles(gencodeGenePred, gencodeAttrTsv)

    def __calculateIntronSupportLevel(self, evid):
        pass

    def calculateSupportLevel(evid):
        pass
    
    def scoreTranscriptLocus(transLocus):
        pacc


opts = parseArgs()
gis = GencodeIntronSupport(opts.gencodeGenePred, opts.gencodeAttrTsv, opts.spliceJunctionEvidTsv)
