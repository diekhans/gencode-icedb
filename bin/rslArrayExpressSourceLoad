#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import argparse
from urllib.request import urlopen
from urllib.error import URLError
import time
import dateutil
import dateutil.parser
import xml.etree.ElementTree as ET
from gencode_icedb.general import dataOps
from gencode_icedb.general.dbModels import dbCurrentTime, dbGuidGen
from gencode_icedb.general.dbModels import EvidenceType, EvidenceRepo, RnaSeqFileFormat
from gencode_icedb.rsl.rslModels import rslConnect, rslClose, RslEvidenceSource
from pycbio.sys import loggingOps

bulk_size = 100   # size of each bulk insert

#FIXME: this is not yet safe

def parseArgs():
    desc = """Load ArrayExpress source metadata obtained from rnaseqer API and ENA API.
    """
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument("--analysisJson", dest="analysisJsons", action="append",
                        help="""JSON output from rnaseq API getRun request. Each JSON file may have multiple entries and this option maybe repeated.""")
    parser.add_argument('evidenceDbUrl',
                        help="""URL of database to store evidence source (see DbUrl)""")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts)
    return opts


class MetadataException(Exception):
    """Some error obtaining or paring metadata"""
    def __init__(self, msg, acc=None):
        if acc is not None:
            msg += ": " + acc
        super().__init__(msg)
        self.acc = acc


def analysisMetaReader(analysiss):
    for analysis in analysiss:
        yield from dataOps.jsonReader(analysis)


def enaApiQuery(acc):
    """Retrying interface to ENA API.  MetadataException if not found,
    otherwise the element tree of the result body"""
    viewUrl = "http://www.ebi.ac.uk/ena/data/view/{acc}&display=xml"

    def mkRequest():
        cnt = 0
        while True:
            try:
                return urlopen(viewUrl.format(acc=acc))
            except URLError as ex:
                if cnt >= 10:
                    raise MetadataException("ENA API request failed", acc=acc) from ex
                cnt += 1
                time.sleep(cnt * 0.5)

    result = ET.fromstring(mkRequest().read())
    # If accession was not found, the results are a document with just a <ROOT>
    # with the text:
    #   Entry: ARFARF display type is either not supported or entry is not found.
    if len(result) == 0:
        if result.text.find('entry is not found') < 0:
            raise MetadataException("expected string 'entry is not found' when no data returned got '{}'".format(result.text),
                                    acc=acc)
        return MetadataException("ENA entry not found", acc=acc)
    return result


def findEnaFirst(rootEl, path):
    els = rootEl.findall(path)
    return els[0] if len(els) > 0 else None


def getEnaFirst(rootEl, path):
    el = findEnaFirst(rootEl, path)
    if el is None:
        raise MetadataException("can't find {} in {}".format(path, str(rootEl)), acc=getEnaAcc(rootEl))
    return el


def getEnaAcc(rootEl, path):
    # element under ROOT has accession (EXPERIMENT, RUN)
    return getEnaFirst(rootEl, "*").get("accession")


def guessEvidType(exprRec):
    el = findEnaFirst(exprRec, "EXPERIMENT/PLATFORM/ILLUMINA")
    if el is not None:
        return EvidenceType.SHORT_RNASEQ
    raise MetadataException("can't guess evidence type", acc=getEnaAcc(exprRec))


def getPlatform(exprRec):
    el = findEnaFirst(exprRec, "EXPERIMENT/PLATFORM/ILLUMINA/INSTRUMENT_MODEL")
    if el is not None:
        return el.text
    else:
        raise MetadataException("can't determine platform", acc=getEnaAcc(exprRec))


def getMetadata(analysisRec):
    try:
        sampleRec = enaApiQuery(analysisRec.SAMPLE_IDS)
        runRec = enaApiQuery(analysisRec.RUN_IDS)
        exprRec = enaApiQuery(getEnaFirst(runRec, "RUN/EXPERIMENT_REF").get("accession"))
        return sampleRec, exprRec, runRec
    except Exception as ex:
        raise MetadataException("Failed to obtain ENA metadata for {}".format(analysisRec.RUN_IDS), acc=analysisRec.RUN_IDS) from ex



def parseTime(tstr):
    return dateutil.parser.parse(tstr, tzinfos=[dateutil.tz.UTC])


def createDbRec(analysisRec, sampleRec, exprRec, runRec):
    gmt = dbCurrentTime()  # ensure same
    rec = RslEvidenceSource(guid=dbGuidGen(),
                            create_time=gmt,
                            update_time=gmt,
                            repo=EvidenceRepo.ARRAY_EXPRESS,
                            sample_id=analysisRec.SAMPLE_IDS,
                            run_id=analysisRec.RUN_IDS,
                            src_id=analysisRec.RUN_IDS,
                            src_time=parseTime(analysisRec.LAST_PROCESSED_DATE),
                            organism=analysisRec.ORGANISM,
                            assembly=analysisRec.ASSEMBLY_USED,
                            evidence_type=guessEvidType(exprRec),
                            platform=getPlatform(exprRec),
                            data_format=RnaSeqFileFormat.CRAM,
                            url1=analysisRec.CRAM_LOCATION)
    rec.save()


def processEntry(analysisRec):
    sampleRec, exprRec, runRec = getMetadata(analysisRec)
    # FIXME: need to check if it should be inclduue
    createDbRec(analysisRec, sampleRec, exprRec, runRec)


def rslArrayExpressSourceLoad(opts):
    conn = rslConnect(opts.evidenceDbUrl, create=True, readonly=False)
    RslEvidenceSource.create_table(safe=True)
    with conn.atomic():
        for analysisRec in analysisMetaReader(opts.analysisJsons):
            processEntry(analysisRec)
    rslClose(conn)


rslArrayExpressSourceLoad(parseArgs())
