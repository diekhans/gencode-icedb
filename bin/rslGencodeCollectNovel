#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import argparse
import csv
from pycbio.sys import fileOps, setOps
from pycbio.hgdata.coords import Coords
from gencode_icedb.general.gencodeDb import UcscGencodeReader
from gencode_icedb.general.genome import GenomeReaderFactory
from gencode_icedb.general.transFeatures import IntronFeature
from gencode_icedb.rsl.rslModels import rslConnect, rslClose, SjSupportReader
from gencode_icedb.rsl.intronSupportCounter import IntronSupportCounter


def parseArgs():
    desc = """Collect novel splice sites evidence for a chromosome range
    (window) that are not in GENCODE annotations.  If intron is within an
    existing gene, report that geneId.  If an putative intron is not
    completely in the window into the chromosome, it will only be processed if
    window contains the first bases of the intron.  This allows generating
    contiguous, non-overlapping regions.
    """
    parser = argparse.ArgumentParser(description=desc)
    GenomeReaderFactory.addCmdOptions(parser)
    parser.add_argument("--minUniqueMapped", type=int, default=0,
                        help="""Minimum number of uniquely mapped reads to call as novel""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database""")
    parser.add_argument('sjDb',
                        help="""splice junction evidence sqlite3 database, a correspond *.sjsup.gz and tabix index file must exist""")
    parser.add_argument('resultsTsv',
                        help="""TSV file for results""")
    parser.add_argument('chromRange',
                        help="""zero-based chromosome range, in the form chr:start-end.""")
    return parser.parse_args()


resultsHeader = ("chrom", "intronStart", "intronEnd", "strand", "intronMotif",
                 "numExprs", "numUniqueMapReads", "numMultiMapReads", "geneIds")


class NovelFinder(object):
    def __init__(self, annotReader, sjConn, genomeReader, minUniqueMapped):
        self.annotReader = annotReader
        self.sjSupportReader = SjSupportReader(sjDbConn=sjConn)
        self.genomeReader = genomeReader
        self.minUniqueMapped = minUniqueMapped

        # genes are counts for range
        self.rangeSupportCnts = IntronSupportCounter(genomeReader)

    def _loadRangeSupport(self, genomeCoords):
        # only use ones that start in this window
        for sjSupp in self.sjSupportReader.fetch(genomeCoords.name, genomeCoords.start, genomeCoords.end):
            if (sjSupp.strand in ('+', '-')) and (genomeCoords.start <= sjSupp.chromStart) and (sjSupp.chromStart < genomeCoords.end):
                self.rangeSupportCnts.sumSjSupp(sjSupp)

    def _getTranscriptsOverlapping(self, intron):
        return self.annotReader.getTranscriptsOverlapping(intron.chrom, intron.chromStart, intron.chromEnd, intron.strand)

    def _haveIntron(self, intron, trans):
        # already strand-filtered
        for feat in trans.features:
            if (isinstance(feat, IntronFeature) and (intron.chromStart == feat.chrom.start)
                and (intron.chromEnd == feat.chrom.end)):
                return True
        return False

    def _anyHaveIntron(self, intron, overlappingTranses):
        for trans in overlappingTranses:
            if self._haveIntron(intron, trans):
                return True
        return False

    def _getContainingGenes(self, intron, overlappingTranses):
        geneIds = set()
        for trans in overlappingTranses:
            geneIds.add(trans.attrs.geneId)
        return geneIds

    def _reportNovel(self, intron, sjCounts, overlappingTranses, resultsWriter):
        geneIds = self._getContainingGenes(intron, overlappingTranses)
        resultsWriter.writerow([intron.chrom, intron.chromStart, intron.chromEnd,
                                intron.strand, intron.intronMotif,
                                sjCounts.numExprs,
                                sjCounts.numUniqueMapReads,
                                sjCounts.numMultiMapReads,
                                setOps.setJoin(geneIds, ",")])

    def _analyzeSj(self, intron, sjCounts, resultsWriter):
        overlappingTranses = self._getTranscriptsOverlapping(intron)
        if not self._anyHaveIntron(intron, overlappingTranses):
            self._reportNovel(intron, sjCounts, overlappingTranses, resultsWriter)

    def _analyzeRange(self, resultsWriter):
        for intron in sorted(self.rangeSupportCnts.keys()):
            if intron.strand in ('+', '-'):
                sjCounts = self.rangeSupportCnts[intron]
                if sjCounts.numUniqueMapReads >= self.minUniqueMapped:
                    self._analyzeSj(intron, sjCounts, resultsWriter)

    def collectNovel(self, genomeCoords, resultsWriter):
        self._loadRangeSupport(genomeCoords)
        resultsWriter.writerow(resultsHeader)
        self._analyzeRange(resultsWriter)


def rslGencodeCollectNovel(opts):
    "entry point"
    genomeCoords = Coords.parse(opts.chromRange)
    genomeReader = GenomeReaderFactory.factoryFromCmdOptions(opts).obtain()
    annotReader = UcscGencodeReader(opts.gencodeDb, genomeReader)
    sjConn = rslConnect(opts.sjDb, readonly=True)
    novelFinder = NovelFinder(annotReader, sjConn, genomeReader, opts.minUniqueMapped)

    fileOps.ensureFileDir(opts.resultsTsv)
    resultsTmpTsv = fileOps.atomicTmpFile(opts.resultsTsv)
    with open(resultsTmpTsv, "w") as fh:
        novelFinder.collectNovel(genomeCoords, csv.writer(fh, dialect=csv.excel_tab,
                                                          lineterminator='\n'))
    fileOps.atomicInstall(resultsTmpTsv, opts.resultsTsv)
    rslClose(sjConn)


rslGencodeCollectNovel(parseArgs())
