#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import os
import argparse
from pycbio.sys import fileOps
from pycbio.hgdata.coords import Coords
from gencode_icedb.general.genome import GenomeReader


def parseArgs():
    desc = """Generate parasol jobs site evidence considering GENCODE annotations."""
    parser = argparse.ArgumentParser(description=desc)
    GenomeReader.addCmdOptions(parser)
    parser.add_argument("--windowSize", type=int, default=10000000,
                        help="""maximum window size""")
    parser.add_argument("--testRange", type=Coords.parse,
                        help="""Only generate jobs that overlap the specified range, for testing""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database""")
    parser.add_argument('sjDb',
                        help="""splice junction evidence sqlite3 database, a correspond *.sjsup.gz and tabix index file must exist""")
    parser.add_argument('workDir',
                        help="""directory where jobFile and temporary results are stored""")
    opts = parser.parse_args()
    return opts


class JobGenerator(object):
    def __init__(self, gencodeDb, sjDb, genomeReader, windowSize, workDir):
        self.gencodeDb = gencodeDb
        self.sjDb = sjDb
        self.genomeReader = genomeReader
        self.windowSize = windowSize
        self.workDir = workDir
        self.resultDir = os.path.join(workDir, "results")
        self.novelProg = os.path.join(icedbProgSetup.binDir, "rslGencodeCollectNovelJob")

    def _generateJob(self, genomeCoords, batchFh, expectedFh):
        cmd = [self.novelProg] + self.genomeReader.getOptionArgs()
        resultTsv = os.path.join(self.resultDir, "{}.novel.tsv".format(genomeCoords))
        cmd.extend([self.gencodeDb, self.sjDb, "{{check out exists {}}}".format(resultTsv), genomeCoords])
        print(*cmd, file=batchFh)
        print(resultTsv, file=expectedFh)

    def _generateChromJob(self, chrom, chromSize, batchFh, expectedFh, testRange):
        chromStart = 0
        while chromStart < chromSize:
            chromEnd = min(chromStart + self.windowSize, chromSize)
            genomeCoords = Coords(chrom, chromStart, chromEnd)
            if (testRange is None) or genomeCoords.overlaps(testRange):
                self._generateJob(genomeCoords, batchFh, expectedFh)
            chromStart = chromEnd

    def generateJobs(self, batchFh, expectedFh, testRange):
        for chrom in self.genomeReader.getChroms():
            if (testRange is None) or (chrom == testRange.name):
                self._generateChromJob(chrom, self.genomeReader.getChromSize(chrom), batchFh, expectedFh, testRange)


def rslGencodeCollectSupportMkJobs(opts):
    "main function"
    genomeReader = GenomeReader.getFromCmdOptions(opts)
    jobGen = JobGenerator(opts.gencodeDb, opts.sjDb, genomeReader, opts.windowSize, opts.workDir)

    fileOps.ensureDir(opts.workDir)
    batchFile = os.path.join(opts.workDir, "batch.jobs")
    expectedLst = os.path.join(opts.workDir, "expected.lst")
    with open(batchFile, "w") as batchFh, open(expectedLst, "w") as expectedFh:
        jobGen.generateJobs(batchFh, expectedFh, opts.testRange)


rslGencodeCollectSupportMkJobs(parseArgs())
