#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import os
import argparse
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader
from gencode_icedb.rsl.saturation import SaturationCounts


def parseArgs():
    desc = """Combine rslGencodeCollectSupport job results."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('workDir',
                        help="""directory contains results directory""")
    parser.add_argument('resultsTsv',
                        help="""combined TSV.""")
    return parser.parse_args()


def loadWindowResults(resultsTsv):
    return [row for row in TsvReader(resultsTsv, typeMap=SaturationCounts.tsvTypeMap)]


def loadAllResults(expectedTsvs):
    maxNumExprs = 0
    byWindowByNumExpr = {}   # [resultName][exprNum]
    for resultsTsv in expectedTsvs:
        winResults = loadWindowResults(resultsTsv)
        byWindowByNumExpr[resultsTsv] = winResults
        maxNumExprs = max(maxNumExprs, len(winResults))
    return byWindowByNumExpr, maxNumExprs


def countByNumExpr(iExpr, byWindowByNumExpr):
    saturationCounts = SaturationCounts(iExpr + 1)
    for winResults in byWindowByNumExpr.values():
        # fill in with last row if there is no coverage in this window for number of experiments
        if len(winResults) > 0:
            row = winResults[min(iExpr, len(winResults) - 1)]
            saturationCounts.sumTsvRow(row)
    return saturationCounts


def collectResults(expectedTsvs):
    byWindowByNumExpr, maxNumExprs = loadAllResults(expectedTsvs)
    countsByNumExpr = []
    for iExpr in xrange(maxNumExprs):
        countsByNumExpr.append(countByNumExpr(iExpr, byWindowByNumExpr))
    return countsByNumExpr


def writeResults(countsByNumExpr, fh):
    SaturationCounts.writeHeader(fh)
    for iExpr in xrange(len(countsByNumExpr)):
        countsByNumExpr[iExpr].write(fh)


def rslGencodeCollectSupportMkJobs(opts):
    "main function"
    expectedTsvs = fileOps.readFileLines(os.path.join(opts.workDir, "expected.lst"))
    countsByNumExpr = collectResults(expectedTsvs)
    with open(opts.resultsTsv, "w") as fh:
        writeResults(countsByNumExpr, fh)


rslGencodeCollectSupportMkJobs(parseArgs())
