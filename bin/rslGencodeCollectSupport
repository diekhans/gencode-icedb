#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import argparse
import csv
from pycbio.sys import fileOps
from gencode_icedb.general.ucscGencodeSource import UcscGencodeReader
from gencode_icedb.general.genome import GenomeReader
from gencode_icedb.general.transFeatures import IntronFeature
from gencode_icedb.rsl.rslModels import rslConnect, rslClose, SjSupportReader
from gencode_icedb.rsl.intronSupportCounter import IntronSupportCounter

# FIXME: both support and novel could be collected in one pass.
# is this true? do we really needs jobs to group by transcript


def parseArgs():
    desc = """Collect splice site evidence for a subset of GENCODE annotations."""
    parser = argparse.ArgumentParser(description=desc)
    GenomeReader.addCmdOptions(parser)
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database""")
    parser.add_argument('sjDb',
                        help="""splice junction evidence sqlite3 database, a correspond *.sjsup.gz and tabix index file must exist""")
    parser.add_argument('resultsTsv',
                        help="""TSV file for results""")
    parser.add_argument('gencodeIds', nargs='+',
                        help="""GENCODE gene or transcript ids, including versions.""")
    return parser.parse_args()


resultsHeader = ("geneId", "geneName", "transcriptId", "transcriptType",
                 "chrom", "intronStart", "intronEnd", "strand", "intronMotif",
                 "numExprs", "numUniqueMapReads", "numMultiMapReads")


class SupportCounter(object):
    def __init__(self, annotReader, genomeReader, sjConn):
        self.annotReader = annotReader
        self.genomeReader = genomeReader
        self.sjSupportReader = SjSupportReader(sjDbConn=sjConn)

    def _sumSupportsByIntron(self, chrom, start, end):
        # FIXME: use coords
        intronSupportCnts = IntronSupportCounter(self.genomeReader)
        for sjSupp in self.sjSupportReader.fetch(chrom, start, end):
            intronSupportCnts.sumSjSupp(sjSupp)
        return intronSupportCnts

    def _sumSupportForGene(self, geneAnnots):
        """Sums support by introns for SJ in the range, so transcripts should be a locus,
        either transcripts in one gene locus or one transcript.  Collecting all upfront
        prevents multiple queries for shared introns."""
        chrom = geneAnnots.chrom
        return self._sumSupportsByIntron(chrom.name, chrom.start, chrom.end)

    def _collectTransIntronSupport(self, transAnnot, intronFeat, intronSupportCnts, resultsWriter):
        intron, sjCounts = intronSupportCnts.getIntronFeatCounts(intronFeat)
        transAttrs = transAnnot.attrs
        resultsWriter.writerow([transAttrs.geneId, transAttrs.geneName,
                                transAttrs.transcriptId,
                                transAttrs.transcriptType,
                                intron.chrom, intron.chromStart, intron.chromEnd,
                                intron.strand, intron.intronMotif,
                                sjCounts.numExprs,
                                sjCounts.numUniqueMapReads,
                                sjCounts.numMultiMapReads])

    def _collectTranscriptSupport(self, transAnnot, intronSupportCnts, resultsWriter):
        for feat in transAnnot.features:
            if isinstance(feat, IntronFeature):
                self._collectTransIntronSupport(transAnnot, feat, intronSupportCnts, resultsWriter)

    def _collectTranscriptsSupport(self, geneAnnot, resultsWriter):
        intronSupportCnts = self._sumSupportForGene(geneAnnot)
        for transAnnot in geneAnnot.transcripts:
            self._collectTranscriptSupport(transAnnot, intronSupportCnts, resultsWriter)

    def collectSupport(self, gencodeIds, resultsWriter):
        resultsWriter.writerow(resultsHeader)
        for geneAnnot in self.annotReader.getGenesByGencodeIds(gencodeIds):
            self._collectTranscriptsSupport(geneAnnot, resultsWriter)


def rslGencodeCollectSupport(opts):
    "entry point"
    genomeReader = GenomeReader.getFromCmdOptions(opts)
    annotReader = UcscGencodeReader(opts.gencodeDb, genomeReader)
    sjConn = rslConnect(opts.sjDb, readonly=True)
    supportCounter = SupportCounter(annotReader, genomeReader, sjConn)

    fileOps.ensureFileDir(opts.resultsTsv)
    resultsTmpTsv = fileOps.atomicTmpFile(opts.resultsTsv)
    with open(resultsTmpTsv, "w") as fh:
        supportCounter.collectSupport(opts.gencodeIds, csv.writer(fh, dialect=csv.excel_tab,
                                                                  lineterminator='\n'))
    fileOps.atomicInstall(resultsTmpTsv, opts.resultsTsv)
    genomeReader.close()
    annotReader.close()
    rslClose(sjConn)


rslGencodeCollectSupport(parseArgs())
