#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import os
import argparse
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader, tsvRowToDict
from gencode_icedb.rsl.rslModels import rslConnect, rslClose, GencodeIntronSupport

bulk_size = 75   # size of each bulk insert


def parseArgs():
    desc = """Combine rslGencodeCollectSupport job results."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('workDir',
                        help="""directory contains results directory""")
    parser.add_argument('resultsDb',
                        help="""Sqlite database were results are stored."""
                        """This does not append results, existing gencodesupport table is dropped.""")
    return parser.parse_args()


resultsTsvTypeMap = {
    "intronStart": int,
    "intronEnd": int,
    "numUniqueMapReads": int,
    "numMultiMapReads": int}


def resultsDbLoad(conn, recs):
    with conn.atomic():
        for idx in range(0, len(recs), bulk_size):
            GencodeIntronSupport.insert_many(recs[idx:idx + bulk_size]).execute()


def loadResultsTsv(resultsTsv):
    return [tsvRowToDict(row) for row in TsvReader(resultsTsv, typeMap=resultsTsvTypeMap)]


def collectResults(conn, expectedTsvs):
    recs = []
    for resultsTsv in expectedTsvs:
        recs.extend(loadResultsTsv(resultsTsv))
    resultsDbLoad(conn, recs)


def rslGencodeCollectSupportFinishJobs(opts):
    "main function"
    fileOps.ensureFileDir(opts.resultsDb)
    conn = rslConnect(opts.resultsDb, create=True, readonly=False)
    GencodeIntronSupport.drop_table(fail_silently=True)
    GencodeIntronSupport.create_table()
    expectedTsvs = fileOps.readFileLines(os.path.join(opts.workDir, "expected.lst"))
    collectResults(conn, expectedTsvs)
    rslClose(conn)


rslGencodeCollectSupportFinishJobs(parseArgs())
