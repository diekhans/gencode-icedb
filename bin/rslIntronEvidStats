#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import sys
import argparse
from collections import defaultdict
from pycbio.sys import fileOps, loggingOps, mathOps
from gencode_icedb.rsl.rslModel import sqliteConnect, sqliteClose
from gencode_icedb.rsl.gencodeIntronEvid import IntronSupportLevel, intronEvidSupportLevel
from gencode_icedb.rsl.supportAnalysis import intronSupportReader

# FIXME: move to analysis repo


def parseArgs():
    desc = """Create statistics on intron supporting evidence"""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--chrom',
                        help="limit to chrom or chrom range (for testing)")
    parser.add_argument('dataType', choices=("support", "novel"),
                        help="type of database")
    parser.add_argument('intronEvidDb',
                        help="support or novel database")
    parser.add_argument('outPrefix',
                        help="prefix for statistics output files")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


class IntronEvidData(object):
    "data linked to GENCODE transcripts"
    def __init__(self, dataType):
        self.isNovelDb = (dataType == "novel")
        self.introns = {}  # dup because of transcripts dropped
        self.chroms = set()

    def __loadRec(self, rec):
        # only keeps one, so not double counted
        self.introns[(rec.intronStart, rec.intronEnd, rec.strand)] = rec

    def load(self, chrom):
        for rec in intronSupportReader(self.isNovelDb, chrom):
            self.__loadRec(rec)

    ##
    # Uniq support levels
    ##

    def __cntUniqSupportLevels(self):
        uniqCnts = defaultdict(int)
        for intron in self.introns.values():
            ulevel = intronEvidSupportLevel(intron.numUniqueMapReads)
            # don't count no unique for none:
            if (not self.isNovelDb) or (intron.numUniqueMapReads > 0):
                uniqCnts[ulevel] += 1
        return uniqCnts

    def __reportUniqSupportLevels(self, fh):
        uniqCnts = self.__cntUniqSupportLevels()
        total = sum(uniqCnts.values())
        for ulevel in reversed(IntronSupportLevel):
            fileOps.prRowv(fh, ulevel, uniqCnts[ulevel], mathOps.calcFmtFreq(uniqCnts[ulevel], total))
        fileOps.prRowv(fh, "total", total, mathOps.calcFmtFreq(total, total))

    def reportUniqSupportLevels(self, uniqTsv):
        with open(uniqTsv, "w") as fh:
            self.__reportUniqSupportLevels(fh)

    ##
    # Uniq and multi support levels
    ##

    def __cntBothSupportLevels(self):
        bothCnts = defaultdict(int)
        for intron in self.introns.values():
            ulevel = intronEvidSupportLevel(intron.numUniqueMapReads)
            mlevel = intronEvidSupportLevel(intron.numMultiMapReads)
            bothCnts[(ulevel, mlevel)] += 1
        return bothCnts

    def __reportBothSupportLevels(self, fh):
        bothCnts = self.__cntBothSupportLevels()
        total = sum(bothCnts.values())
        fileOps.prRowv(fh, "uniqLevel", "multiLevel", "count", "rate")
        for ulevel in reversed(IntronSupportLevel):
            for mlevel in reversed(IntronSupportLevel):
                key = (ulevel, mlevel)
                fileOps.prRowv(fh, ulevel, mlevel, bothCnts[key], mathOps.calcFmtFreq(bothCnts[key], total))
        fileOps.prRowv(fh, "total", "total", total, mathOps.calcFmtFreq(total, total))

    def reportBothSupportLevels(self, bothTsv):
        with open(bothTsv, "w") as fh:
            self.__reportBothSupportLevels(fh)


def rslIntronEvidStats(opts):
    intronEvidData = IntronEvidData(opts.dataType)
    conn = sqliteConnect(opts.intronEvidDb, readonly=True)
    intronEvidData.load(opts.chrom)
    sqliteClose(conn)
    fileOps.ensureFileDir(opts.outPrefix)
    intronEvidData.reportUniqSupportLevels("{}uniq-support-stats.tsv".format(opts.outPrefix))
    intronEvidData.reportBothSupportLevels("{}both-support-stats.tsv".format(opts.outPrefix))


rslIntronEvidStats(parseArgs())
