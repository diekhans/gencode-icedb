#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import sys
import argparse
from pycbio.sys import fileOps, loggingOps
from pycbio.sys.color import Color
from gencode_icedb.rsl.rslModel import sqliteConnect, sqliteClose
from gencode_icedb.rsl.gencodeIntronEvid import IntronSupportLevel, intronEvidSupportLevel
from gencode_icedb.rsl.supportAnalysis import intronSupportReader, intronSupportAlreadyProcessed


def parseArgs():
    desc = """Create a BED of introns support"""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--htmlColors', action="store_true", default=False,
                        help="print colors in  HTML format for use in documentation, then exit")
    parser.add_argument('dataType', choices=("support", "novel"),
                        help="type of database")
    parser.add_argument('intronEvidDb',
                        help="support or novel database")
    parser.add_argument('bedOut',
                        help="output BED file")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


class Colors(object):
    "color codes"
    strongNovel = Color.fromRgb8(0, 0, 128)  # dark blue
    strongKnown = Color.fromRgb8(0, 128, 0)  # dark green
    mediumNovel = Color.fromRgb8(0, 0, 255)  # light blue
    mediumKnown = Color.fromRgb8(0, 255, 0)  # light green
    weak = Color.fromRgb8(238, 118, 0)  # dark orange
    none = Color.fromRgb8(128, 0, 0)  # dark red

    @staticmethod
    def __printColorHtml(fh, desc, color):
        print('<li><p style="color:{}">{}</p>'.format(color.toHtmlColor(), desc), file=fh)

    @staticmethod
    def printHtml(fh=sys.stdout):
        "for inclusion in documentation"
        Colors.__printColorHtml(fh, "strong support known intron", Colors.strongKnown)
        Colors.__printColorHtml(fh, "strong support novel intron", Colors.strongNovel)
        Colors.__printColorHtml(fh, "medium support known intron", Colors.mediumKnown)
        Colors.__printColorHtml(fh, "medium support novel intron", Colors.mediumNovel)
        Colors.__printColorHtml(fh, "weak support known intron", Colors.weak)
        Colors.__printColorHtml(fh, "no support known intron", Colors.none)


class GencodeIntronBedMaker(object):
    def __init__(self, dataType):
        self.isNovelDb = (dataType == "novel")
        self.reported = set()   # don't output dups due to multiple transcripts

    def __evidColor(self, evid, level):
        if level == IntronSupportLevel.STRONG:
            if self.isNovelDb:
                return Colors.strongNovel
            else:
                return Colors.strongKnown
        elif level == IntronSupportLevel.MEDIUM:
            if self.isNovelDb:
                return Colors.mediumNovel
            else:
                return Colors.mediumKnown
        elif level == IntronSupportLevel.WEAK:
            return Colors.weak
        elif level == IntronSupportLevel.NONE:
            return Colors.none

    @staticmethod
    def __evidStrand(evid):
        if (evid.strand is not None) and (evid.strand not in ('?', '.')):
            return evid.strand
        else:
            return '+'  # something valid

    @staticmethod
    def __evidName(evid):
        return "{} ({}, {})".format(evid.intronMotif, evid.numUniqueMapReads, evid.numMultiMapReads)

    def __shouldReport(self, supp, level):
        if intronSupportAlreadyProcessed(supp, self.reported):
            return False

        # don't report weak novel
        return (not self.isNovelDb) or (level > IntronSupportLevel.WEAK)

    def __writeBedRec(self, supp, bedFh):
        level = intronEvidSupportLevel(supp.numUniqueMapReads, self.isNovelDb)
        if self.__shouldReport(supp, level):
            fileOps.prRowv(bedFh, supp.chrom, supp.intronStart, supp.intronEnd,
                           self.__evidName(supp), 0, self.__evidStrand(supp),
                           supp.intronStart, supp.intronEnd,
                           self.__evidColor(supp, level).toRgb8Str())

    def writeBed(self, bedFh):
        for rec in intronSupportReader(self.isNovelDb):
            self.__writeBedRec(rec, bedFh)


def rslIntronSuppBed(opts):
    if opts.htmlColors:
        Colors.printHtml()
        sys.exit(0)
    intronBedMaker = GencodeIntronBedMaker(opts.dataType)
    conn = sqliteConnect(opts.intronEvidDb, readonly=True)
    with open(opts.bedOut, "w") as bedFh:
        intronBedMaker.writeBed(bedFh)
    sqliteClose(conn)


rslIntronSuppBed(parseArgs())
