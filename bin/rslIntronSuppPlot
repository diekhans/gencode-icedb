#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import sys
import argparse
import logging
from pycbio.sys import loggingOps
from gencode_icedb.rsl.rslModel import sqliteConnect, sqliteClose
from gencode_icedb.rsl.supportAnalysis import intronSupportReader, intronSupportAlreadyProcessed
from collections import defaultdict
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

logger = None


def parseArgs():
    desc = """Create density plots of plots of intron supporting evidence,
    either known or novel"""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--readCntBucketSize', type=int, default=10,
                        help="number of reads are bucked by this amount")
    parser.add_argument('dataType', choices=("support", "novel"),
                        help="type of database")
    parser.add_argument('intronEvidDb',
                        help="support or novel database")
    parser.add_argument('plotOut',
                        help="output plot file, defaults to pdf")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    global logger
    logger = logging.getLogger()
    return opts


class IntronEvidData(object):
    def __init__(self, dataType, readCntBucketSize):
        self.readCntBucketSize = readCntBucketSize
        self.isNovelDb = (dataType == "novel")
        self.intronsByReadCnt = None

    def __logIntronsByReadCnt(self):
        logger.debug("readCnt\tnumIntrons")
        for readCntBucket in sorted(self.intronsByReadCnt.keys()):
            logger.debug("{}\t{}".format(readCntBucket * self.readCntBucketSize, self.intronsByReadCnt[readCntBucket]))

    def load(self):
        self.intronsByReadCnt = defaultdict(int)
        reported = set()   # don't output dups due to multiple transcripts
        for rec in intronSupportReader(self.isNovelDb):
            if not intronSupportAlreadyProcessed(rec, reported):
                self.intronsByReadCnt[rec.numUniqueMapReads / self.readCntBucketSize] += 1
        if logger.isEnabledFor(logging.DEBUG):
            self.__logIntronsByReadCnt()

    def __countDictToList(self, intronsByReadCnt):
        intronCnts = []
        suppCnts = []
        for readCntBucket in intronsByReadCnt.keys():
            intronCnts.append(intronsByReadCnt[readCntBucket])
            suppCnts.append(readCntBucket * self.readCntBucketSize)
        return intronCnts, suppCnts

    def plot(self, plotOut, uselog=False):
        intronCnts, suppCnts = self.__countDictToList(self.intronsByReadCnt)
        color = "b"

        if self.isNovelDb:
            xlabel = "Novel Introns"
        else:
            xlabel = "GENCODE Introns"
        ylabel = "Unique mapped supporting reads"
        plt.interactive(False)
        if uselog:
            plt.xscale('log')
            xlabel += " (log)"
            plt.yscale('log')
            ylabel += " (log)"
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.scatter(intronCnts, suppCnts, color=color, rasterized=True)
        plt.savefig(plotOut)
        plt.show()


def rslIntronSuppPlot(opts):
    intronEvidData = IntronEvidData(opts.dataType, opts.readCntBucketSize)
    conn = sqliteConnect(opts.intronEvidDb, readonly=True)
    intronEvidData.load()
    sqliteClose(conn)
    intronEvidData.plot(opts.plotOut, uselog=False)


rslIntronSuppPlot(parseArgs())
