#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import sys
import argparse
from pycbio.sys import fileOps, loggingOps, mathOps
from gencode_icedb.rsl.supportAnalysis import GencodeIntronEvid
from gencode_icedb.tsl.supportDefs import TrascriptionSupportLevel
from gencode_icedb.rsl.gencodeIntronEvid import IntronSupportLevel
from gencode.data.gencodeGenes import BioType, bioTypesCoding, bioTypesNonCoding, bioTypesPseudo, GencodeExtendedMethod

# FIXME: move to analysis repo


def parseArgs():
    desc = """Create statistics on transcript support"""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--chrom',
                        help="limit to chrom or chrom range (for testing)")
    parser.add_argument('gencodeDb',
                        help="GENCODE database")
    parser.add_argument('intronEvidDb',
                        help="support database")
    parser.add_argument('outPrefix',
                        help="prefix for statistics output files")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts

##
# per-transcript support
##


def _reportTranscriptSupport(gie, fh):
    fileOps.prRow(fh, ["transcriptId", "strand", "numIntrons", "transcriptType", "method"]
                  + [l for l in reversed(IntronSupportLevel)]
                  + ["fullLevel", "medianLevel", "tsl"])
    for transId in sorted(gie.byTransIds.keys()):
        trans = gie.byTransIds[transId]
        fileOps.prRow(fh, [trans.transcriptId, trans.strand, len(trans.introns), trans.bioType, trans.method]
                      + list(reversed(trans.countLevels()))
                      + [trans.fullSupportLevel(), trans.medianSupportLevel(), trans.tsl])


def reportTranscriptSupport(gie, transSuppTsv):
    with open(transSuppTsv, "w") as fh:
        _reportTranscriptSupport(gie, fh)

##
# full transcript support stats
##


def _cntTranscriptsStats(gie, transFilter, statFunc):
    levelTotals = [0 for l in IntronSupportLevel]
    for trans in gie.byTransIds.values():
        if transFilter(trans):
            levelTotals[statFunc(trans).value] += 1
    return levelTotals


def _reportTranscriptTypeStats(gie, transType, subfilter, subtype, transFilter, fh, statFunc):
    levelTotals = _cntTranscriptsStats(gie, transFilter, statFunc)
    transCnt = sum(levelTotals)
    fileOps.prRow(fh, [transType, subfilter, subtype]
                  + list(reversed(levelTotals))
                  + [mathOps.calcFmtFreq(c, transCnt) for c in reversed(levelTotals)])


def allFilter(trans):
    return True


def codingFilter(trans):
    return BioType(trans.bioType) in bioTypesCoding


def nonCodingFilter(trans):
    return BioType(trans.bioType) in bioTypesNonCoding

def pseudoFilter(trans):
    return BioType(trans.bioType) in bioTypesPseudo

def otherFilter(trans):
    return not (codingFilter(trans) or nonCodingFilter(trans))


transcriptClasses = ("all", "coding", "non-coding", "pseudo", "other")


def classFilter(gie, tc):
    if tc == "all":
        return allFilter
    elif tc == "coding":
        return codingFilter
    elif tc == "non-coding":
        return nonCodingFilter
    elif tc == "pseudo":
        return pseudoFilter
    elif tc == "other":
        return otherFilter


def _reportTranscriptTypeStatsByAll(gie, fh, statFunc):
    for tc in transcriptClasses:
        filt = classFilter(gie, tc)
        _reportTranscriptTypeStats(gie, tc, "none", "all", lambda trans: filt(trans), fh, statFunc)


def _reportTranscriptTypeStatsByTsl(gie, fh, statFunc):
    for tsl in TrascriptionSupportLevel:
        for tc in transcriptClasses:
            filt = classFilter(gie, tc)
            _reportTranscriptTypeStats(gie, tc, "tsl", tsl, lambda trans: trans.tsl == tsl and filt(trans), fh, statFunc)


def _reportTranscriptTypeStatsByMethod(gie, fh, statFunc):
    for method in GencodeExtendedMethod.values:
        for tc in transcriptClasses:
            filt = classFilter(gie, tc)
            _reportTranscriptTypeStats(gie, tc, "method", method, lambda trans: trans.method == method and filt(trans), fh, statFunc)


def _reportTranscriptTypeStatsByChrom(gie, fh, statFunc):
    chroms = sorted(gie.chroms, key=lambda c: (len(c), c))
    for chrom in chroms:
        for tc in transcriptClasses:
            filt = classFilter(gie, tc)
            _reportTranscriptTypeStats(gie, tc, "chrom", chrom, lambda trans: trans.chrom == chrom and filt(trans), fh, statFunc)


def _reportTranscriptSupportStats(gie, fh, statFunc):
    fileOps.prRow(fh, ["type", "subfilter", "subtype"]
                  + ["{}_cnt".format(l) for l in reversed(IntronSupportLevel)]
                  + ["{}_freq".format(l) for l in reversed(IntronSupportLevel)])
    _reportTranscriptTypeStatsByAll(gie, fh, statFunc)
    _reportTranscriptTypeStatsByTsl(gie, fh, statFunc)
    _reportTranscriptTypeStatsByChrom(gie, fh, statFunc)
    _reportTranscriptTypeStatsByMethod(gie, fh, statFunc)


def reportTranscriptFullSupportStats(gie, transSuppStatsTsv):
    with open(transSuppStatsTsv, "w") as fh:
        _reportTranscriptSupportStats(gie, fh, lambda trans: trans.fullSupportLevel())


def reportTranscriptMedianSupportStats(gie, transSuppStatsTsv):
    with open(transSuppStatsTsv, "w") as fh:
        _reportTranscriptSupportStats(gie, fh, lambda trans: trans.medianSupportLevel())


def rslIntronSuppStats(opts):
    gie = GencodeIntronEvid()
    gie.loadSupportDb(opts.intronEvidDb, opts.chrom)
    gie.loadGencodeDb(opts.gencodeDb)

    fileOps.ensureFileDir(opts.outPrefix)
    reportTranscriptSupport(gie, "{}trans-support.tsv".format(opts.outPrefix))
    reportTranscriptFullSupportStats(gie, "{}trans-full-support-stats.tsv".format(opts.outPrefix))
    reportTranscriptMedianSupportStats(gie, "{}trans-median-support-stats.tsv".format(opts.outPrefix))

rslIntronSuppStats(parseArgs())
