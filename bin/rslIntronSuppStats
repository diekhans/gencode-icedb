#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import sys
import argparse
import sqlite3
from numpy import median
from pycbio.sys import fileOps, loggingOps, mathOps
from pycbio.hgdata.hgLite import GencodeTranscriptSourceDbTable, GencodeTranscriptionSupportLevelDbTable
from gencode_icedb.general import gencodeDb
from gencode_icedb.rsl.rslModel import sqliteConnect, sqliteClose
from gencode_icedb.rsl.gencodeIntronEvid import IntronSupportLevel, intronEvidSupportLevel
from gencode_icedb.rsl.supportAnalysis import intronSupportReader
from gencode.data.gencodeGenes import BioType, bioTypesCoding, bioTypesNonCoding, GencodeExtendedMethod, sourceToExtendedMethod

# FIXME: move to analysis repo


def parseArgs():
    desc = """Create statistics on transcript support"""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--chrom',
                        help="limit to chrom or chrom range (for testing)")
    parser.add_argument('gencodeDb',
                        help="GENCODE database")
    parser.add_argument('intronEvidDb',
                        help="support database")
    parser.add_argument('outPrefix',
                        help="prefix for statistics output files")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


class Trans(object):
    def __init__(self, geneId, transcriptId, bioType):
        self.geneId = geneId
        self.transcriptId = transcriptId
        self.bioType = bioType
        self.method = None
        self.tsl = None
        self.introns = []
        self.intronLevels = []

    def addIntron(self, intron):
        self.introns.append(intron)
        self.intronLevels.append(intronEvidSupportLevel(intron.numUniqueMapReads))

    @property
    def chrom(self):
        return self.introns[0].chrom

    @property
    def strand(self):
        return self.introns[0].strand

    def countLevels(self):
        levelCnts = len(IntronSupportLevel) * [0]
        for intronLevel in self.intronLevels:
            levelCnts[intronLevel.value] += 1
        return levelCnts

    def fullSupportLevel(self):
        "finds lowest level any intron, which is the full transcript support level"
        levelCnts = self.countLevels()
        for level in IntronSupportLevel:
            if levelCnts[level.value] > 0:
                return level

    def medianSupportLevel(self):
        "finds lowest level any intron, which is the full transcript support level"
        return IntronSupportLevel(int(median([il.value for il in self.intronLevels])))


class IntronEvidData(object):
    "data linked to GENCODE transcripts"
    def __init__(self):
        self.chroms = set()
        self.byTransIds = {}

    def __obtainTransInfo(self, rec):
        trans = self.byTransIds.get(rec.transcriptId)
        if trans is None:
            trans = self.byTransIds[rec.transcriptId] = Trans(rec.geneId, rec.transcriptId, rec.transcriptType)
        return trans

    def __loadRec(self, rec):
        self.chroms.add(rec.chrom)
        self.__obtainTransInfo(rec).addIntron(rec)

    def load(self, chrom):
        for rec in intronSupportReader(False, chrom):
            self.__loadRec(rec)

    def loadGencodeSource(self, gencodeDbConn):
        dbTable = GencodeTranscriptSourceDbTable(gencodeDbConn, gencodeDb.gencode_transcript_source_table)
        for rec in dbTable.queryAll():
            trans = self.byTransIds.get(rec.transcriptId)
            if trans is not None:
                trans.method = sourceToExtendedMethod(rec.source)

    def loadGencodeSupportLevel(self, gencodeDbConn):
        dbTable = GencodeTranscriptionSupportLevelDbTable(gencodeDbConn, gencodeDb.gencode_transcription_support_level_table)
        for rec in dbTable.queryAll():
            trans = self.byTransIds.get(rec.transcriptId)
            if trans is not None:
                trans.tsl = rec.level

    ##
    # per-transcript support
    ##

    def __reportTranscriptSupport(self, fh):
        fileOps.prRow(fh, ["transcriptId", "strand", "numIntrons", "transcriptType", "method"]
                      + [l for l in reversed(IntronSupportLevel)]
                      + ["fullLevel", "medianLevel", "tsl"])
        for transId in sorted(self.byTransIds.keys()):
            trans = self.byTransIds[transId]
            fileOps.prRow(fh, [trans.transcriptId, trans.strand, len(trans.introns), trans.bioType, trans.method]
                          + list(reversed(trans.countLevels()))
                          + [trans.fullSupportLevel(), trans.medianSupportLevel(), trans.tsl])

    def reportTranscriptSupport(self, transSuppTsv):
        with open(transSuppTsv, "w") as fh:
            self.__reportTranscriptSupport(fh)

    ##
    # full transcript support stats
    ##

    def __cntTranscriptsStats(self, transFilter, statFunc):
        levelTotals = [0 for l in IntronSupportLevel]
        for trans in self.byTransIds.values():
            if transFilter(trans):
                levelTotals[statFunc(trans).value] += 1
        return levelTotals

    def __reportTranscriptTypeStats(self, transType, subfilter, subtype, transFilter, fh, statFunc):
        levelTotals = self.__cntTranscriptsStats(transFilter, statFunc)
        transCnt = sum(levelTotals)
        fileOps.prRow(fh, [transType, subfilter, subtype]
                      + list(reversed(levelTotals))
                      + [mathOps.calcFmtFreq(c, transCnt) for c in reversed(levelTotals)])

    @staticmethod
    def __allFilter(trans):
        return True

    @staticmethod
    def __codingFilter(trans):
        return BioType(trans.bioType) in bioTypesCoding

    @staticmethod
    def __nonCodingFilter(trans):
        return BioType(trans.bioType) in bioTypesNonCoding

    transcriptClasses = ("all", "coding", "non-coding")

    def __classFilter(self, tc):
        if tc == "all":
            return self.__allFilter
        elif tc == "coding":
            return self.__codingFilter
        elif tc == "non-coding":
            return self.__nonCodingFilter
    
    def __reportTranscriptTypeStatsByAll(self, fh, statFunc):
        for tc in self.transcriptClasses:
            filt = self.__classFilter(tc)
            self.__reportTranscriptTypeStats(tc, "none", "all", lambda trans: filt(trans), fh, statFunc)

    def __reportTranscriptTypeStatsByTsl(self, fh, statFunc):
        for tsl in xrange(1, 6):
            for tc in self.transcriptClasses:
                filt = self.__classFilter(tc)
                self.__reportTranscriptTypeStats(tc, "tsl", tsl, lambda trans: trans.tsl == tsl and filt(trans), fh, statFunc)

    def __reportTranscriptTypeStatsByMethod(self, fh, statFunc):
       for method in GencodeExtendedMethod.values:
            for tc in self.transcriptClasses:
                filt = self.__classFilter(tc)
                self.__reportTranscriptTypeStats(tc, "method", method, lambda trans: trans.method == method and filt(trans), fh, statFunc)

    def __reportTranscriptTypeStatsByChrom(self, fh, statFunc):
        chroms = sorted(self.chroms, key=lambda c: (len(c), c))
        for chrom in chroms:
            for tc in self.transcriptClasses:
                filt = self.__classFilter(tc)
                self.__reportTranscriptTypeStats(tc, "chrom", chrom, lambda trans: trans.chrom == chrom and filt(trans), fh, statFunc)

    def __reportTranscriptSupportStats(self, fh, statFunc):
        fileOps.prRow(fh, ["type", "subfilter", "subtype"]
                      + ["{}_cnt".format(l) for l in reversed(IntronSupportLevel)]
                      + ["{}_freq".format(l) for l in reversed(IntronSupportLevel)])
        self.__reportTranscriptTypeStatsByAll(fh, statFunc)
        self.__reportTranscriptTypeStatsByTsl(fh, statFunc)
        self.__reportTranscriptTypeStatsByChrom(fh, statFunc)
        self.__reportTranscriptTypeStatsByMethod(fh, statFunc)

    def reportTranscriptFullSupportStats(self, transSuppStatsTsv):
        with open(transSuppStatsTsv, "w") as fh:
            self.__reportTranscriptSupportStats(fh, lambda trans: trans.fullSupportLevel())

    def reportTranscriptMedianSupportStats(self, transSuppStatsTsv):
        with open(transSuppStatsTsv, "w") as fh:
            self.__reportTranscriptSupportStats(fh, lambda trans: trans.medianSupportLevel())


def rslIntronSuppStats(opts):
    intronEvidData = IntronEvidData()
    conn = sqliteConnect(opts.intronEvidDb, readonly=True)
    intronEvidData.load(opts.chrom)
    sqliteClose(conn)
    fileOps.ensureFileDir(opts.outPrefix)
    gencodeDbConn = sqlite3.connect(opts.gencodeDb)
    intronEvidData.loadGencodeSource(gencodeDbConn)
    intronEvidData.loadGencodeSupportLevel(gencodeDbConn)
    gencodeDbConn.close()
    intronEvidData.reportTranscriptSupport("{}trans-support.tsv".format(opts.outPrefix))
    intronEvidData.reportTranscriptFullSupportStats("{}trans-full-support-stats.tsv".format(opts.outPrefix))
    intronEvidData.reportTranscriptMedianSupportStats("{}trans-median-support-stats.tsv".format(opts.outPrefix))


rslIntronSuppStats(parseArgs())
1
