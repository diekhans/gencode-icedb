#!/usr/bin/env python3

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import os
import sys
import argparse
import logging
from pycbio.sys import loggingOps, fileOps
from gencode_icedb.rsl.starResultsDir import StarResultsDir
import pipettor


def parseArgs():
    desc = """Run one or more process to split a collection of STAR sjout files
    by chromosome for merging."""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--numprocs', type=int, default=1,
                        help="""Number of parallel process to run""")
    parser.add_argument('starResultsDirTsv',
                        help="""TSV file with column `sjout', which has the path to the splice junction file, which maybe compressed."""
                        """The path is relative to the directory containing starResultsTsv""")
    parser.add_argument('mergeWorkDir',
                        help="""Directory for doing split and merge.  Chrom splits go in mergeWorkDir/byChrom""")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


def mkProc(starResultsDirTsv, startRec, endRec, byChromDir):
    cmd = ["rslStarSjOutSplit",
           "-startDirRec={}".format(startRec),
           "-endDirRec={}".format(endRec),
           starResultsDirTsv, byChromDir]
    proc = pipettor.Pipeline([cmd])
    logging.debug(str(proc))
    proc.start()
    return proc


def mkProcs(starResultsDirTsv, numResults, numprocs, byChromDir):
    procs = []
    splitSize = numResults // numprocs
    startRec = 0
    for iProc in range(0, numprocs):
        # last split gets all remaining
        endRec = startRec + splitSize if iProc < numprocs - 1 else numResults
        procs.append(mkProc(starResultsDirTsv, startRec, endRec, byChromDir))
        startRec = endRec
    return procs


def rslMkStarSjOutSplits(opts):
    starResultsDir = StarResultsDir(opts.starResultsDirTsv)
    byChromDir = os.path.join(opts.mergeWorkDir, "byChrom")
    if os.path.exists(byChromDir):
        exit("Error: chrome split directory should not exist: {}".format(byChromDir))
    fileOps.ensureDir(opts.mergeWorkDir)
    procs = mkProcs(opts.starResultsDirTsv, len(starResultsDir), opts.numprocs,
                    byChromDir)
    for proc in procs:
        proc.wait()


rslMkStarSjOutSplits(parseArgs())
