#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import os
import sys
import argparse
import logging
import glob
from pycbio.sys import loggingOps, fileOps


rslStarSjSupMergeJob = os.path.join(icedbProgSetup.rootDir, "bin", "rslStarSjSupMergeJob")

def parseArgs():
    desc = """generate a series of parasol batches to merge splice split
    splice junction files."""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--filesPerJob', type=int, default=25,
                        help="""number of files to merge in a given job""")
    parser.add_argument('mergeWorkDir',
                        help="""Directory for doing split and merge.  Chrom splits should be in mergeWorkDir/byChrom""")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts

def getByChromSplits(byChromDir):
    "return list of split sjsup files, in chrom sorted order"
    sjsupSplits = []
    for chromDir in glob.glob(os.path.join(byChromDir, "*")):
        for sjsupSplit in glob.glob(os.path.join(chromDir, "*.sjsup")):
            sjsupSplits.append(sjsupSplit)
    if len(sjsupSplits) == 0:
        exit("Error: no sjsup fies found in under: {}".format(byChromDir))
    return sjsupSplits

def writeInFile(sjsups, inFileFh):
    for sjsup in sjsups:
        print(sjsup, file=inFileFh)

def writeMergeBatchJob(sjsupSplits, filesPerJob, mergeBatchFh, mergeBatchDir, iSplit, iJob, sjsupMerges):
    inFileList = os.path.join(mergeBatchDir, "{:03}.in".format(iJob))
    mergeJobOut = os.path.join(mergeBatchDir, "{:03}.sjsup".format(iJob))

    numFiles = min(len(sjsupSplits) - iSplit, filesPerJob)
    # avoid final job with just one input
    if numFiles == len(sjsupSplits) - 1:
        numFiles += 1

    with open(inFileList, "w") as inFileFh: 
        writeInFile(sjsupSplits[iSplit:iSplit + numFiles], inFileFh)

    print(rslStarSjSupMergeJob, inFileList, mergeJobOut, file=mergeBatchFh)
    sjsupMerges.append(mergeJobOut)

    return iSplit + numFiles


def writeMergeBatch(sjsupSplits, filesPerJob, mergeBatchFh, mergeBatchDir):
    fileOps.ensureDir(mergeBatchDir)
    sjsupMerges = []
    iSplit = 0
    iJob = 0
    while iSplit < len(sjsupSplits):
        iSplit = writeMergeBatchJob(sjsupSplits, filesPerJob, mergeBatchFh, mergeBatchDir, iSplit, iJob, sjsupMerges)
        iJob += 1
    return sjsupMerges

def mkMergeBatch(sjsupSplits, filesPerJob, mergeBatchFile, mergeBatchDir):
    """for a list of input files, generate a merge batch, return list of merge
    output"""
    with open(mergeBatchFile, "w") as mergeBatchFh:
        return writeMergeBatch(sjsupSplits, filesPerJob, mergeBatchFh, mergeBatchDir)

def rslMkStarSjOutSplits(opts):
    byChromDir = os.path.join(opts.mergeWorkDir, "byChrom")
    sjsupSplits = getByChromSplits(byChromDir)
    mergeBatchNum = 0
    while len(sjsupSplits) > 1:
        mergeBatchDir = os.path.join(opts.mergeWorkDir, "{:03}.merged".format(mergeBatchNum))
        mergeBatchFile = os.path.join(opts.mergeWorkDir, "{:03}.merge.jobs".format(mergeBatchNum))
        sjsupSplits = mkMergeBatch(sjsupSplits, opts.filesPerJob, mergeBatchFile, mergeBatchDir)
        mergeBatchNum += 1

rslMkStarSjOutSplits(parseArgs())
