#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import sys
import os
import argparse
import math
from pycbio.sys import fileOps
from gencode_icedb import dataOps
from gencode_icedb.rsl.gencodeIntronEvid import GencodeIntronEvidReader
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.colors as colors
from pycbio.sys import loggingOps


def parseArgs():
    desc = """Create density plots of introns supporting evidence"""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('spliceJunctionEvidTsv',
                        help="length of reads that will be mapped; used to calculate splice junction overhang")
    parser.add_argument('plotOut',
                        help="output plot file, defaults to pdf")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


class GencodeIntronEvidPlot(object):
    def __init__(self, spliceJunctionEvidTsv):
         self.knownReadCnt = []
         self.novelReadCnt = []
         self.__load(spliceJunctionEvidTsv)

    def __useRec(self, rec):
        return True
        if rec.novel:
            rec.numUniqueMapReads >= 100
        else:
            return True
    def __load(self, spliceJunctionEvidTsv):
        for rec in GencodeIntronEvidReader(spliceJunctionEvidTsv):
            if self.__useRec(rec):
                self.__loadRec(rec)

    def __loadRec(self, rec):
        cnt = rec.numUniqueMapReads
        if rec.novel:
            self.novelReadCnt.append(cnt)
        else:
            self.knownReadCnt.append(cnt)

    def plot(self, plotOut):
        plt.interactive(False)
        #plt.xscale('log', nonposy='clip')
        bins=1000
        bins = [-1, 0, 1, 10, 100, 1000, 10000, 100000]
        log = False
        #log = False
        #range = (0, 1000)
        range = None
        normed = True
        #normed = False
        if False:
            datasets = [self.knownReadCnt, self.novelReadCnt]
            color = [(0.0, 1.0, 0.0, 0.5), (1.0, 0.0, 0.0, 0.5)]
            label = ["Known", "Novel"],
        else:
            datasets = [self.knownReadCnt]
            color = [(0.0, 1.0, 0.0, 0.5)]
            label = ["Known"],
        n, bins, patches = plt.hist(datasets,
                                    bins, histtype="stepfilled",
                                    color=color, label=label,
                                    log=log, range=range, normed=normed)
        plt.savefig(plotOut)
        plt.show()

def rnaSeqIntronEvidPlot(opts):
    ##FIXME: should be option? matplotlib.interactive(1)
    giep = GencodeIntronEvidPlot(opts.spliceJunctionEvidTsv)
    giep.plot(opts.plotOut)
                 
rnaSeqIntronEvidPlot(parseArgs())
