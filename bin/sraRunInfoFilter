#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import argparse
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader
from gencode_icedb.general import ncbi


def parseArgs():
    desc = """
    filter a SRA RunInfo CSV/TSV for desired RNA-Seq runs

    https://www.ncbi.nlm.nih.gov/sra/advanced:
      (Homo sapiens[Organism]) AND "transcriptomic"[Source]
      (Mus musculus[Organism]) AND "transcriptomic"[Source]
    Format: runinfo
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--gtex", action="store_true", default=False,
                        help="output GTEx rows, default is only public")
    parser.add_argument("--public", action="store_true", default=False,
                        help="output public rows, specify with --gtex to get both")
    parser.add_argument("--selectSubsetTsv", action="store", default=None,
                        help="""TSV file with column `acc' to specify subset of records to obtain.""")
    parser.add_argument("--subsetRequired", action="store_true", default=False,
                        help="If specified, an error if not all of the runs in --selectSubsetTsv are in input.")
    parser.add_argument("inCsv",
                        help="input CSV or TSV, maybe compressed")
    parser.add_argument("outTsv",
                        help="output TSV, may have compression extensions")
    opts = parser.parse_args()
    if not (opts.gtex or opts.public):
        opts.public = True
    return opts


gtexStudy = "SRP012682"
sourceFilter = frozenset(["TRANSCRIPTOMIC"])
strategyFilter = frozenset(["AMPLICON", "EST", "FL-cDNA", "ncRNA-Seq", "RNA-Seq"])
platformFilter = frozenset(["ILLUMINA"])
consentFilter = frozenset(["public"])
minRunLength = 40


def loadSelectSubset(selectSubsetTsv):
    return frozenset([row.acc for row in TsvReader(selectSubsetTsv)])


class RowFilter(object):
    def __init__(self, public, gtex, selectSubsetTsv):
        self.public = public
        self.gtex = gtex
        self.selectSubset = loadSelectSubset(selectSubsetTsv) if selectSubsetTsv is not None else None

    @staticmethod
    def _publicRowFilter(row):
        # avgLength of more than zero will check if for rows with no data
        return ((row.avgLength >= minRunLength)
                and (row.LibrarySource in sourceFilter)
                and (row.LibraryStrategy in strategyFilter)
                and (row.Consent in consentFilter)
                and (row.Platform in platformFilter))

    @staticmethod
    def _gtexRowFilter(row):
        # avgLength check is for rows with no data
        return ((row.avgLength > 0)
                and (row.SRAStudy == gtexStudy))

    def __call__(self, row):
        return (((self.public and self._publicRowFilter(row))
                 or (self.gtex and self._gtexRowFilter(row)))
                and ((self.selectSubset is None) or (row.Run in self.selectSubset)))


def filterTsv(rowFilter, csvReader, outFh):
    selectedRuns = set()
    for row in csvReader:
        if rowFilter(row):
            row.write(outFh)
            selectedRuns.add(row.Run)
    return selectedRuns


def checkForMissingSubset(selectSubset, selectedRuns):
    missing = selectSubset - selectedRuns
    if len(missing) > 0:
        exit("Error: {} select runs not found in runinfo file: {}".format(len(missing), " ".join(sorted(missing))))


def sraRunInfoFilter(opts):
    cvsReader = ncbi.runInfoReader(opts.inCsv)
    rowFilter = RowFilter(opts.public, opts.gtex, opts.selectSubsetTsv)
    with fileOps.opengz(opts.outTsv, "w") as outFh:
        fileOps.prRow(outFh, cvsReader.columns)
        selectedRuns = filterTsv(rowFilter, cvsReader, outFh)

    if opts.subsetRequired and (rowFilter.selectSubset is not None):
        checkForMissingSubset(rowFilter.selectSubset, selectedRuns)


sraRunInfoFilter(parseArgs())
