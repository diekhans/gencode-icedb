#!/usr/bin/env python

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import argparse
from pycbio.sys import fileOps, loggingOps
from gencode_icedb import dataOps
import sys
import logging
import pipettor


def parseArgs():
    desc = """Create STAR genome index for a given read size and annotation set"""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--numThreads', type=int,
                        help="number of threads to use")
    parser.add_argument('--tmpDir',
                        help="""temporary directory to use; a directory with a unique name is created under here and removed after.  Defaults to value of TMPDIR""")
    parser.add_argument('genomeFa',
                        help="genome FASTA file")
    parser.add_argument('annotationGtf',
                        help="GTF of annotations to define splice junctions")
    parser.add_argument('readLength', type=int,
                        help="length of reads that will be mapped; used to calculate splice junction overhang")
    parser.add_argument('genomeDir',
                        help="""directory to contain all the generated files;
                        this must not exist; Log.out is also saved in this directory""")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


def starCmd(genomeFa, numThreads, genomeDir, annotationGtf, readLength, starTmpDir):
    return ["STAR",
            "--genomeFastaFiles", genomeFa,
            "--runMode", "genomeGenerate",
            "--runThreadN", numThreads,
            "--genomeDir", genomeDir,
            "--outTmpDir", starTmpDir,
            "--sjdbGTFfile", annotationGtf,
            "--sjdbOverhang", readLength - 1,
            "--outFileNamePrefix", genomeDir + "/"]


def generateStarGenome(genomeFa, annotationGtf, readLength, numThreads, genomeDir, tmpDir):
    starTmpDir = dataOps.getNewTmpDir(tmpDir)
    fileOps.ensureDir(genomeDir)
    genomeFa = dataOps.TmpUncompress(genomeFa, tmpDir)
    annotationGtf = dataOps.TmpUncompress(annotationGtf, tmpDir)
    cmd = starCmd(genomeFa.path, numThreads, genomeDir, annotationGtf.path, readLength, starTmpDir)
    pipettor.run(cmd, logger=logging.getLogger())
    genomeFa.finish()
    annotationGtf.finish()


def starGenerateGenome(opts):
    generateStarGenome(opts.genomeFa, opts.annotationGtf, opts.readLength, opts.numThreads, opts.genomeDir, opts.tmpDir)


starGenerateGenome(parseArgs())
