#!/usr/bin/env python

import sys
import os
import argparse
sys.path.insert(0, os.path.expanduser("~markd/compbio/code/pycbio"))
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from pycbio.sys import fileOps
from gencode_icedb import dataOps, pipelineOps

verbose = False
def parseArgs():
    desc = """Create STAR genome index for a given read size and annotation set"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--numThreads', type=int,
                        help="number of threads to use")
    parser.add_argument('--verbose', action="store_true", default=False,
                        help="write verbose output")
    parser.add_argument('--tmpDir',
                        help="""temporary directory to use; a directory with a unique name is created under here and removed after.  Defaults to value of TMPDIR""")
    parser.add_argument('genomeFa',
                        help="genome FASTA file")
    parser.add_argument('annotationGtf',
                        help="GTF of annotations to define splice junctions")
    parser.add_argument('readLength', type=int,
                        help="length of reads that will be mapped; used to calculate splice junction overhang")
    parser.add_argument('genomeDir',
                        help="""directory to contain all the generated files;
                        this must not exist; Log.out is also saved in this directory""")
    opts = parser.parse_args()
    global verbose
    verbose = opts.verbose
    return opts

def starCmd(genomeFa, numThreads, genomeDir, annotationGtf, readLength, starTmpDir):
    return ["STAR",
            "--genomeFastaFiles", genomeFa,
            "--runMode", "genomeGenerate",
            "--runThreadN", numThreads,
            "--genomeDir", genomeDir,
            "--outTmpDir", starTmpDir,
            "--sjdbGTFfile", annotationGtf,
            "--sjdbOverhang", readLength-1,
            "--outFileNamePrefix", genomeDir + "/"]

def starGenerateGenome(genomeFa, annotationGtf, readLength, numThreads, genomeDir, tmpDir):
    starTmpDir = dataOps.getNewTmpDir(tmpDir)
    fileOps.ensureDir(genomeDir)
    genomeFa = dataOps.TmpUncompress(genomeFa, tmpDir)
    annotationGtf = dataOps.TmpUncompress(annotationGtf, tmpDir)
    cmd = starCmd(genomeFa.path, numThreads, genomeDir, annotationGtf.path, readLength, starTmpDir)
    pipelineOps.runCmd(cmd, verbose=verbose)
    genomeFa.finish()
    annotationGtf.finish()

opts = parseArgs()
starGenerateGenome(opts.genomeFa, opts.annotationGtf, opts.readLength, opts.numThreads, opts.genomeDir, opts.tmpDir)
