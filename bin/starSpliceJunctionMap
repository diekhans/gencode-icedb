#!/bin/env python

import sys
import os
import argparse
from shutil import copyfile
sys.path.insert(0, os.path.expanduser("~markd/compbio/code/pycbio"))
from pycbio.sys import fileOps
from pycbio.sys import procOps
from pycbio.sys.pipeline import DataReader


def parseArgs():
    desc = """Map reads to a genome with annotations and save splice junction mapping
    information,"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--numThreads', type=int,
                        help="number of threads to use")
    parser.add_argument('--tmpDir',
                        help="""temporary directory to use; a directory with a unique name is created under here and removed after.  Defaults to value of TMPDIR""")
    parser.add_argument('genomeDir',
                        help="""directory to contain all the generated files;
                        this must not exist; Log.out is also saved in this directory""")
    parser.add_argument('readsFile',
                        help="""input reads in SAM or BAM format""")
    parser.add_argument('sjOut',
                        help="""splice junction output file """)
    return parser.parse_args()


def starSpliceJunctionMap(opts):
    starTmpDir = fileOps.tmpFileGet(prefix="star", tmpDir=opts.tmpDir)
    # holds output files before filtering
    outputTmpDir = fileOps.tmpFileGet(prefix="starout", tmpDir=opts.tmpDir)
    sjTmpOut = os.path.join(outputTmpDir, "SJ.out.tab")
    fileOps.ensureDir(outputTmpDir)
    cmd0 = ["samtools", "bam2fq", opts.readsFile]
    cmd1 = ["STAR",
            "--runMode", "alignReads",
            "--runThreadN", opts.numThreads,
            "--outSAMmode", "None",
            "--genomeDir", opts.genomeDir,
            "--readFilesIn", "/dev/stdin",
            "--outTmpDir", starTmpDir,
            "--outFileNamePrefix", outputTmpDir+"/"]
    procOps.runProc((cmd0, cmd1), stderr=DataReader)
    copyfile(sjTmpOut, opts.sjOut)
    fileOps.rmTree(outputTmpDir)


starSpliceJunctionMap(parseArgs())
