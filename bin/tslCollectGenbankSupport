#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import argparse
from contextlib import ExitStack
from pycbio.sys import fileOps
from gencode_icedb.general.ucscGencodeSource import UcscGencodeReader
from gencode_icedb.tsl.evidenceDb import EvidenceReader, EvidenceSource
from gencode_icedb.tsl.supportClassify import tightExonPolymorphicSizeLimit, tightExonPolymorphicFactionLimit, EvidenceQualityEval, FullLengthSupportEvaluator

# FIXME: rsl uses csv.writer, make all consisten


def parseArgs():
    desc = """Collect support for gencode annotations.  Normally run in a
    cluster job."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--detailsTsv',
                        help="""write details for supporting evaluations to this TSV file""")
    parser.add_argument('--allDetails', action="store_true", default=False,
                        help="""write details for all evaluations the detailsTsv file, not just supporting ones""")
    parser.add_argument('--evidSource', dest='evidSources', action='append',
                        type=EvidenceSource,
                        help="""only used evidence from this source, maybe repeated""")
    parser.add_argument('--evidId', dest='evidIds', action='append', default=None,
                        help="""only used evidence with this id from the source, maybe repeated.  For debugging.""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database""")
    parser.add_argument('evidenceDb',
                        help="""evidence sqlite3 database""")
    parser.add_argument('tslTsv',
                        help="""output of TSL categories""")
    parser.add_argument('gencodeIds', nargs='+',
                        help="""GENCODE gene ids, including versions.""")
    args = parser.parse_args()
    if args.evidSources is None:
        args.evidSources = [e for e in EvidenceSource]
    return args


def classifyGenes(evidenceReader, geneAnnots, tslTsvFh, detailsTsvFh):
    qualEval = EvidenceQualityEval(tightExonPolymorphicSizeLimit, tightExonPolymorphicFactionLimit)
    evaluator = FullLengthSupportEvaluator(evidenceReader, qualEval)
    evaluator.writeTsvHeaders(tslTsvFh, detailsTsvFh)
    for geneAnnot in geneAnnots:
        evaluator.classifyGeneTranscripts(geneAnnot, tslTsvFh, detailsTsvFh)


def tslCollectGenbankSupport(args):
    gencodeReader = UcscGencodeReader(args.gencodeDb)
    evidenceReader = EvidenceReader(args.evidenceDb, sources=args.evidSources, nameSubset=args.evidIds)
    genesAnnots = gencodeReader.getGenesByGencodeIds(args.gencodeIds)
    fileOps.ensureFileDir(args.tslTsv)
    if args.detailsTsv is not None:
        fileOps.ensureFileDir(args.detailsTsv)
    tslTmpTsv = fileOps.atomicTmpFile(args.tslTsv)
    with ExitStack() as stack:
        tslTsvFh = stack.enter_context(open(tslTmpTsv, "w"))
        detailsTsvFh = stack.enter_context(open(args.detailsTsv, "w")) if args.detailsTsv is not None else None
        classifyGenes(evidenceReader, genesAnnots, tslTsvFh, detailsTsvFh)
    fileOps.atomicInstall(tslTmpTsv, args.tslTsv)


tslCollectGenbankSupport(parseArgs())
