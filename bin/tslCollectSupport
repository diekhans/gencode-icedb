#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import argparse
from contextlib import ExitStack
from pycbio.sys import fileOps
from pycbio.sys import loggingOps
from gencode_icedb.general.ucscGencodeSource import UcscGencodeReader
from gencode_icedb.tsl.evidenceDataDb import evidenceAlignsReaderFactory
from gencode_icedb.tsl.supportEval import tightExonPolymorphicSizeLimit, tightExonPolymorphicFactionLimit, EvidenceQualityEval, FullLengthSupportEvaluator

# FIXME: rsl uses csv.writer, make all consistent


def parseArgs():
    desc = """Collect support for GENCODE annotations from an evidence alignment data set.
     Normally run in a cluster job."""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--detailsTsv',
                        help="""write details for supporting evaluations to this TSV file""")
    parser.add_argument('--allDetails', action="store_true", default=False,
                        help="""write details for all evaluations the detailsTsv file, not just supporting ones""")
    parser.add_argument('--evidId', dest='evidIds', action='append', default=None,
                        help="""only used evidence with this id from the source, maybe repeated.  For debugging.""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database""")
    parser.add_argument('evidSetUuid',
                        help="""UUID of the evidence set""")
    parser.add_argument('evidAlnFile',
                        help="""evidence PSL tabix or BAM file""")
    parser.add_argument('supportEvalTsv',
                        help="""output of support information in SupportEvalResult format""")
    parser.add_argument('gencodeIds', nargs='+',
                        help="""GENCODE gene ids, including versions.""")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts)
    return opts


def classifyGenes(evidenceReader, geneAnnots, supportEvalTsvFh, detailsTsvFh):
    qualEval = EvidenceQualityEval(tightExonPolymorphicSizeLimit, tightExonPolymorphicFactionLimit)
    evaluator = FullLengthSupportEvaluator(evidenceReader, qualEval)
    evaluator.writeTsvHeaders(supportEvalTsvFh, detailsTsvFh)
    for geneAnnot in geneAnnots:
        evaluator.evaluateGeneTranscripts(geneAnnot, supportEvalTsvFh, detailsTsvFh)


def tslCollectSupport(opts):
    gencodeReader = UcscGencodeReader(opts.gencodeDb)
    evidenceReader = evidenceAlignsReaderFactory(opts.evidSetUuid, opts.evidAlnFile)
    if opts.evidIds is not None:
        evidenceReader.setNameSubset(opts.evidIds)
    genesAnnots = gencodeReader.getGenesByGencodeIds(opts.gencodeIds)
    fileOps.ensureFileDir(opts.supportEvalTsv)
    if opts.detailsTsv is not None:
        fileOps.ensureFileDir(opts.detailsTsv)
    supportEvalTmpTsv = fileOps.atomicTmpFile(opts.supportEvalTsv)
    with ExitStack() as stack:
        supportEvalTsvFh = stack.enter_context(open(supportEvalTmpTsv, "w"))
        detailsTsvFh = stack.enter_context(open(opts.detailsTsv, "w")) if opts.detailsTsv is not None else None
        classifyGenes(evidenceReader, genesAnnots, supportEvalTsvFh, detailsTsvFh)
    fileOps.atomicInstall(supportEvalTmpTsv, opts.supportEvalTsv)


tslCollectSupport(parseArgs())
