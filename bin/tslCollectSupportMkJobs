#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import os
import argparse
from pycbio.sys import fileOps
from pycbio.sys import loggingOps
from pycbio.db import sqliteOps
from pycbio.hgdata.gencodeSqlite import GencodeAttrsSqliteTable
from gencode_icedb.general.ucscGencodeSource import GENCODE_ATTRS_TABLE
from gencode_icedb.tsl.supportDefs import EvidenceType, fakeGenbankUuid


def parseArgs():
    desc = """Generate cluster jobs to collect evidence support for GENCODE annotations."""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--details', action="store_true", default=False,
                        help="""write details for supporting evaluations to detailsTsv file""")
    parser.add_argument('--allDetails', action="store_true", default=False,
                        help="""write details for all evaluations the detailsTsv file, not just supporting ones, implies --details""")
    parser.add_argument("--maxGenes", type=int, default=None,
                        help="""maximum number of genes to use, for testing""")
    parser.add_argument("--gencodeIdFile", default=None,
                        help="""file containing subset of ids""")
    parser.add_argument("--genesPerJob", type=int, default=8,
                        help="""number of genes in a job""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database""")
    parser.add_argument('evidDbDir',
                        help="""evidence database directory""")
    parser.add_argument('workDir',
                        help="""directory where jobFile and temporary results are stored""")
    opts = parser.parse_args()
    if opts.allDetails:
        opts.details = True
    loggingOps.setupFromCmd(opts)
    return opts


class JobGenerator(object):
    def __init__(self, gencodeDb, evidDbDir, genesPerJob, details, allDetails, workDir):
        self.gencodeDb = gencodeDb
        self.evidDbDir = evidDbDir
        self.genesPerJob = genesPerJob
        self.details = details
        self.allDetails = allDetails
        self.workDir = workDir
        self.resultDir = os.path.join(workDir, "results")
        self.suppProg = os.path.join(icedbProgSetup.binDir, "tslCollectSupportJob")

    def _generateJob(self, gencodeIds, evidSetUuid, evidName, evidPslTabix, batchFh, expectedFh):
        resultTsv = os.path.join(self.resultDir, evidName, "{}.support.tsv".format(gencodeIds[0]))
        detailsTsv = os.path.join(self.resultDir, evidName, "{}.support-details.tsv".format(gencodeIds[0]))
        cmd = [self.suppProg, self.gencodeDb, evidSetUuid, evidPslTabix]
        if self.details:
            cmd.append("--detailsTsv={}".format(detailsTsv))
        if self.allDetails:
            cmd.append("--allDetails")
        cmd.append("{{check out exists {}}}".format(resultTsv))
        cmd.extend(gencodeIds)
        print(*cmd, file=batchFh)
        print(resultTsv, file=expectedFh)

    def generateEvidJobs(self, gencodeIds, evidSetUuid, evidName, batchFh, expectedFh):
        evidPslTabix = os.path.join(self.evidDbDir, evidName + ".psl.gz")
        iNext = 0
        while iNext < len(gencodeIds):
            self._generateJob(gencodeIds[iNext: iNext + self.genesPerJob], evidSetUuid, evidName, evidPslTabix, batchFh, expectedFh)
            iNext += self.genesPerJob

    def generateJobs(self, gencodeIds, batchFh, expectedFh):
        for evidType in (EvidenceType.RNA, EvidenceType.EST):
            evidSetUuid = fakeGenbankUuid[evidType]  # FIXME: tmp
            self.generateEvidJobs(gencodeIds, evidSetUuid, str(evidType), batchFh, expectedFh)


def tslCollectSupportMkJobs(opts):
    "main function"
    conn = sqliteOps.connect(opts.gencodeDb, readonly=True)
    attrsDbTable = GencodeAttrsSqliteTable(conn, GENCODE_ATTRS_TABLE)
    if opts.gencodeIdFile is not None:
        gencodeIds = sorted(fileOps.readNonCommentLines(opts.gencodeIdFile))
    else:
        gencodeIds = sorted(attrsDbTable.getGeneIds())
    if opts.maxGenes is not None:
        gencodeIds = gencodeIds[0:opts.maxGenes]
    jobGen = JobGenerator(opts.gencodeDb, opts.evidDbDir, opts.genesPerJob,
                          opts.details, opts.allDetails, opts.workDir)

    fileOps.ensureDir(opts.workDir)
    batchFile = os.path.join(opts.workDir, "batch.jobs")
    expectedLst = os.path.join(opts.workDir, "expected.lst")
    with open(batchFile, "w") as batchFh, open(expectedLst, "w") as expectedFh:
        jobGen.generateJobs(gencodeIds, batchFh, expectedFh)
    conn.close()


tslCollectSupportMkJobs(parseArgs())
