#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import os
import argparse
from pycbio.sys import fileOps
from pycbio.sys import loggingOps
from pycbio.db import sqliteOps
from pycbio.hgdata.gencodeSqlite import GencodeAttrsSqliteTable
from gencode_icedb.general.ucscGencodeSource import GENCODE_ATTRS_TABLE, GENCODE_ANN_TABLE


def parseArgs():
    desc = """Generate cluster jobs to collect evidence support for GENCODE annotations."""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--details', action="store_true", default=False,
                        help="""write details for supporting evaluations to detailsTsv file""")
    parser.add_argument('--allDetails', action="store_true", default=False,
                        help="""write details for all evaluations the detailsTsv file, not just supporting ones, implies --details""")
    parser.add_argument("--maxGenes", type=int, default=None,
                        help="""maximum number of genes to use, for testing""")
    parser.add_argument("--gencodeIdFile", default=None,
                        help="""file containing subset of ids""")
    parser.add_argument("--genesPerJob", type=int, default=8,
                        help="""number of genes in a job""")
    parser.add_argument("--primaryOnly", action="store_true",
                        help="""only analyze primary assembly""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database""")
    parser.add_argument("evidSetName",
                        help="""name of evidence set""")
    parser.add_argument("evidSetUuid",
                        help="""evidence set UUID to added to output""")
    parser.add_argument('evidFile',
                        help="""evidence psl.gz or bam, or directory contain GenBank-RNA.psl.gz or GenBank-EST.psl.gz for genbank""")
    parser.add_argument('tmpDir',
                        help="""tmp directory for results, a directory with evidSetName will be put in here""")
    opts = parser.parse_args()
    if opts.allDetails:
        opts.details = True
    if opts.primaryOnly and (opts.gencodeIdFile is not None):
        parser.error("can't specify --primaryOnly with --gencodeIdFile")
    loggingOps.setupFromCmd(opts)
    return opts


class JobGenerator(object):
    def __init__(self, gencodeDb, evidSetUuid, evidSetName, evidFile, genesPerJob, details, allDetails, tmpDir):
        self.gencodeDb = gencodeDb
        self.evidSetUuid = evidSetUuid
        self.evidSetName = evidSetName
        self.evidFile = evidFile
        self.genesPerJob = genesPerJob
        self.details = details
        self.allDetails = allDetails
        self.workDir = os.path.join(tmpDir, evidSetName)
        self.resultDir = os.path.join(self.workDir, "results")
        self.suppProg = os.path.join(icedbProgSetup.binDir, "tslCollectSupportJob")

    def _generateJob(self, gencodeIds, batchFh, expectedFh):
        resultTsv = os.path.join(self.resultDir, "{}.support.tsv".format(gencodeIds[0]))
        detailsTsv = os.path.join(self.resultDir, "{}.support-details.tsv".format(gencodeIds[0]))
        cmd = [self.suppProg, self.gencodeDb, self.evidSetUuid, self.evidFile]
        if self.details:
            cmd.append("--detailsTsv={}".format(detailsTsv))
        if self.allDetails:
            cmd.append("--allDetails")
        cmd.append("{{check out exists {}}}".format(resultTsv))
        cmd.extend(gencodeIds)
        print(*cmd, file=batchFh)
        print(resultTsv, file=expectedFh)

    def _generateJobs(self, gencodeIds, batchFh, expectedFh):
        iNext = 0
        while iNext < len(gencodeIds):
            self._generateJob(gencodeIds[iNext: iNext + self.genesPerJob], batchFh, expectedFh)
            iNext += self.genesPerJob

    def generateJobs(self, gencodeIds):
        batchFile = os.path.join(self.workDir, "batch.jobs")
        expectedLst = os.path.join(self.workDir, "expected.lst")
        fileOps.ensureDir(self.workDir)
        with open(batchFile, "w") as batchFh, open(expectedLst, "w") as expectedFh:
            self._generateJobs(gencodeIds, batchFh, expectedFh)


def getGeneIdsFromDb(gencodeDb):
    conn = sqliteOps.connect(gencodeDb, readonly=True)
    attrsDbTable = GencodeAttrsSqliteTable(conn, GENCODE_ATTRS_TABLE)
    gencodeIds = sorted(attrsDbTable.getGeneIds())
    conn.close()
    return gencodeIds


def getGeneIdsFromDbForPrimary(gencodeDb):
    conn = sqliteOps.connect(gencodeDb, readonly=True)
    sql = ("SELECT distinct geneId FROM {attrsTbl} WHERE transcriptId IN "
           "(SELECT name FROM {annTbl} WHERE (chrom like 'chr%') and (length(chrom) <= 5))"
           .format(attrsTbl=GENCODE_ATTRS_TABLE, annTbl=GENCODE_ANN_TABLE))
    with sqliteOps.SqliteCursor(conn) as cur:
        cur.execute(sql)
        gencodeIds = sorted([row[0] for row in cur])
    conn.close()
    return gencodeIds


def getGencodeIds(gencodeDb, gencodeIdFile, primaryOnly, maxGenes):
    if gencodeIdFile is not None:
        gencodeIds = sorted(fileOps.readNonCommentLines(gencodeIdFile))
    elif primaryOnly:
        gencodeIds = getGeneIdsFromDbForPrimary(gencodeDb)
    else:
        gencodeIds = getGeneIdsFromDb(gencodeDb)
    if maxGenes is not None:
        gencodeIds = gencodeIds[0:maxGenes]
    return gencodeIds


def tslCollectSupportMkJobs(opts):
    "main function"
    gencodeIds = getGencodeIds(opts.gencodeDb, opts.gencodeIdFile, opts.primaryOnly, opts.maxGenes)

    jobGen = JobGenerator(opts.gencodeDb, opts.evidSetUuid, opts.evidSetName, opts.evidFile,
                          opts.genesPerJob, opts.details, opts.allDetails, opts.tmpDir)
    fileOps.ensureDir(jobGen.workDir)
    jobGen.generateJobs(gencodeIds)


tslCollectSupportMkJobs(parseArgs())
