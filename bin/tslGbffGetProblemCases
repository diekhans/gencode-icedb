#!/usr/bin/env python3

from __future__ import print_function
import icedbProgSetup  # noqa: F401
import re
import argparse
from collections import namedtuple
from pycbio.sys import fileOps
from gencode_icedb.tsl.gbffProblemCaseParser import parseGbff, Organism
from gencode_icedb.tsl.genbankProblemCasesDb import GenbankProblemCase


def parseArgs():
    desc = """Scan genbank flat files looking for known problem libraries.
    This should be run on a cluster.

    Should scan:
        gbpri*.seq.gz
        gbrod*.seq.gz
        gbest*.seq.gz
    Since this looks for historic problem submissions, this can be run
    once and the output saved.  This detects the following problems:
      - NEDO libraries - sequencing technique that is often missing internal
        portions of RNA.
      - Athersys RAGE library - induced expression library
      - ORESTES library - PCR clones

   Note that Athersys RAGE and ORESTES flagging are a duplication of what is
   done by the UCSC GenBank pipeline.
"""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('hsTsvOut',
                        help="output for human")
    parser.add_argument('mmTsvOut',
                        help="output for mouse")
    parser.add_argument('gbffInputs', nargs="*",
                        help="Genbank Flat Files, maybe compressed")
    return parser.parse_args()


class SplitAcc(namedtuple("SplitAcc", ("alpha", "numeric", "version"))):
    """split accession into (alpha, numeric, version).  Numeric is still string."""
    __slots__ = ()

    @staticmethod
    def parse(acc):
        m = re.match("^([A-Z]+)([0-9]+)(\\.([0-9]+))?$", acc)
        if not m:
            raise Exception("can't parse accession \"{}\"".format(acc))
        return SplitAcc(m.group(1), m.group(2), m.group(4))

    def __str__(self):
        if self.version is None:
            return "{}{}".format(self.alpha, self.numeric)
        else:
            return "{}{}.{}".format(self.alpha, self.numeric, self.version)

    @property
    def acc(self):
        return "{}{}".format(self.alpha, self.numeric)

    def isIncrOf(self, accSplit):
        """is accSplit numeric part one more than this part and the
        rest the same"""
        return (accSplit.alpha == self.alpha) and (int(accSplit.numeric) == int(self.numeric) + 1) and (accSplit.version == self.version)


class OrgProblemCases(list):
    """collect organism problem cases and convert from single accession to
    accession ranges"""

    def _findRange(self, idx):
        organism = self[idx].organism
        etype = self[idx].etype
        reason = self[idx].reason
        startAcc = endAcc = SplitAcc.parse(self[idx].startAcc)
        idx += 1
        while ((idx < len(self)) and (self[idx].organism == organism)
               and (self[idx].etype == etype) and (self[idx].reason == reason)):
            nextAcc = SplitAcc.parse(self[idx].startAcc)
            if endAcc.isIncrOf(nextAcc):
                endAcc = nextAcc
                idx += 1
            else:
                break
        return (GenbankProblemCase(organism, etype, startAcc.acc, endAcc.acc, reason), idx)

    def _genRanges(self):
        idx = 0
        while idx < len(self):
            problemCase, idx = self._findRange(idx)
            yield problemCase

    def writeRanges(self, tsvFh):
        fileOps.prRowv(tsvFh, "organism", "etype", "startAcc", "endAcc", "reason")
        self.sort(key=lambda opc: (opc.startAcc,))
        for problemCase in self._genRanges():
            fileOps.prRow(tsvFh, problemCase)


def gbffProblemCaseParse(gbffInputs):
    problemCases = []
    for gbffInput in gbffInputs:
        problemCases.extend(parseGbff(gbffInput))
    return problemCases


def collectProblemCases(gbffInputs):
    problemEntries = gbffProblemCaseParse(gbffInputs)
    byOrgProblemCases = {o: OrgProblemCases() for o in Organism}
    for problemEntry in problemEntries:
        byOrgProblemCases[problemEntry.organism].append(problemEntry)
    return byOrgProblemCases


def writeProblemCases(orgProblemCases, tsvOut):
    with open(tsvOut, "w") as tsvFh:
        orgProblemCases.writeRanges(tsvFh)


def gbffGetProblemCases(opts):
    byOrgProblemCases = collectProblemCases(opts.gbffInputs)
    writeProblemCases(byOrgProblemCases[Organism.hs], opts.hsTsvOut)
    writeProblemCases(byOrgProblemCases[Organism.mm], opts.mmTsvOut)


gbffGetProblemCases(parseArgs())
