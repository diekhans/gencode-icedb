#!/usr/bin/env python3
from __future__ import print_function
import icedbProgSetup  # noqa: F401
import argparse
from contextlib import ExitStack
from collections import defaultdict
from pycbio.sys import fileOps
from gencode_icedb.general.gencodeDb import UcscGencodeReader
from gencode_icedb.tsl.evidenceDb import EvidenceReader
from gencode_icedb.tsl.supportClassify import SupportClassifier
from gencode_icedb.tsl.genbankProblemCases import GenbankProblemCases

# FIXME: rsl uses csv.writer, make all consisten


def parseArgs():
    desc = """Create test data from TSV specifying test genes.  This
    get GENCODE genePreds and evidence PSLs."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--detailsTsv',
                        help="""write details to this TSV file""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database from gencodeDbLoad""")
    parser.add_argument('evidenceDb',
                        help="""evidence sqlite3 database""")
    parser.add_argument('tslTsv',
                        help="""output of TSL categories""")
    parser.add_argument('gencodeIds', nargs='*', default=[],
                        help="""GENCODE gene or transcript ids, including versions.  If not are specified, all transcript are processed""")
    return parser.parse_args()


def getTranscripts(gencodeReader, gencodeIds):
    if len(gencodeIds) == 0:
        return gencodeReader.getAll()
    else:
        return gencodeReader.getByGencodeIds(gencodeIds)


def groupTranscripts(annotTranses):
    groupMap = defaultdict(list)
    for trans in annotTranses:
        groupMap[trans.attrs.geneId].append(trans)
    grouped = []
    for geneId in groupMap.keys():
        grouped.append(groupMap[geneId])
    return grouped


def classifyGeneTranscripts(evidenceReader, geneGroupedTrans, tslTsvFh, detailsTsvFh):
    classifier = SupportClassifier(evidenceReader)
    classifier.writeTsvHeaders(tslTsvFh, detailsTsvFh)
    for geneTranses in geneGroupedTrans:
        classifier.classifyGeneTranscripts(geneTranses, tslTsvFh, detailsTsvFh)


def tslGencodeCollectSupport(args):
    gencodeReader = UcscGencodeReader(args.gencodeDb)
    evidenceReader = EvidenceReader(args.evidenceDb)
    genbankProblems = GenbankProblemCases(evidenceReader.conn)
    geneGroupedTranses = groupTranscripts(getTranscripts(gencodeReader, args.gencodeIds))
    fileOps.ensureFileDir(args.tslTsv)
    if args.detailsTsv is not None:
        fileOps.ensureFileDir(args.detailsTsv)
    tslTmpTsv = fileOps.atomicTmpFile(args.tslTsv)
    with ExitStack() as stack:
        tslTsvFh = stack.enter_context(open(tslTmpTsv, "w"))
        detailsTsvFh = stack.enter_context(open(args.detailsTsv, "w")) if args.detailsTsv is not None else None
        classifyGeneTranscripts(evidenceReader, geneGroupedTranses, tslTsvFh, detailsTsvFh)
    fileOps.atomicInstall(tslTmpTsv, args.tslTsv)


tslGencodeCollectSupport(parseArgs())
