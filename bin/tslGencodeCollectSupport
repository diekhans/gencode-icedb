#!/usr/bin/env python3
from __future__ import print_function
import icedbProgSetup  # noqa: F401
import argparse
from contextlib import ExitStack
from pycbio.sys import fileOps
from gencode_icedb.general.gencodeDb import UcscGencodeReader
from gencode_icedb.tsl.evidenceDb import EvidenceReader, EvidenceSource
from gencode_icedb.tsl.supportClassify import writeTsvHeaders, classifyGeneTranscripts

# FIXME: rsl uses csv.writer, make all consisten


def parseArgs():
    desc = """Collect support for gencode annotations.  Normally run in a
    cluster job."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--detailsTsv',
                        help="""write details to this TSV file""")
    parser.add_argument('--evidSource', dest='evidSources', action='append',
                        type=EvidenceSource, default=[e for e in EvidenceSource],
                        help="""only used evidence from this source, maybe repeated""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database from gencodeDbLoad""")
    parser.add_argument('evidenceDb',
                        help="""evidence sqlite3 database""")
    parser.add_argument('tslTsv',
                        help="""output of TSL categories""")
    parser.add_argument('gencodeIds', nargs='+',
                        help="""GENCODE gene ids, including versions.""")
    return parser.parse_args()


def classifyGenes(evidenceReader, genesTranses, tslTsvFh, detailsTsvFh):
    writeTsvHeaders(tslTsvFh, detailsTsvFh)
    for geneTrans in genesTranses:
        classifyGeneTranscripts(evidenceReader, geneTrans, tslTsvFh, detailsTsvFh)


def tslGencodeCollectSupport(args):
    gencodeReader = UcscGencodeReader(args.gencodeDb)
    evidenceReader = EvidenceReader(args.evidenceDb)
    genesTranses = gencodeReader.getByGencodeIdsGrouped(args.gencodeIds)
    fileOps.ensureFileDir(args.tslTsv)
    if args.detailsTsv is not None:
        fileOps.ensureFileDir(args.detailsTsv)
    tslTmpTsv = fileOps.atomicTmpFile(args.tslTsv)
    with ExitStack() as stack:
        tslTsvFh = stack.enter_context(open(tslTmpTsv, "w"))
        detailsTsvFh = stack.enter_context(open(args.detailsTsv, "w")) if args.detailsTsv is not None else None
        classifyGenes(evidenceReader, genesTranses, tslTsvFh, detailsTsvFh)
    fileOps.atomicInstall(tslTmpTsv, args.tslTsv)


tslGencodeCollectSupport(parseArgs())
