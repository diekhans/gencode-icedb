#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import os
import argparse
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader, tsvRowToDict
from gencode_icedb.tsl.supportDefs import TrascriptionSupportLevel, EvidenceSupport
from gencode_icedb.tsl.tslModels import tslConnect, tslClose, GencodeTranscriptSupport, GencodeTranscriptSupportDetails
from gencode_icedb.general.evidenceDb import EvidenceSource

bulk_size = 75   # size of each bulk insert


def parseArgs():
    desc = """Combine tslGencodeCollectSupport job results."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('workDir',
                        help="""directory contains results directory""")
    parser.add_argument('resultsDb',
                        help="""Sqlite database were results are stored."""
                        """This does not append results, existing gencodesupport table is dropped.""")
    return parser.parse_args()


resultsTsvTypeMap = {
    "level": TrascriptionSupportLevel
}


def resultsDbLoad(conn, recs):
    with conn.atomic():
        for idx in range(0, len(recs), bulk_size):
            GencodeTranscriptSupport.insert_many(recs[idx:idx + bulk_size]).execute()


def loadResultsTsv(resultsTsv):
    return [tsvRowToDict(row) for row in TsvReader(resultsTsv, typeMap=resultsTsvTypeMap)]


def collectResults(conn, expectedTsvs):
    recs = []
    for resultsTsv in expectedTsvs:
        recs.extend(loadResultsTsv(resultsTsv))
    resultsDbLoad(conn, recs)


resultDetailsTsvTypeMap = {
    "evidSrc": EvidenceSource,
    "evidSupport": EvidenceSupport,
}


def resultDetailsDbLoad(conn, recs):
    with conn.atomic():
        for idx in range(0, len(recs), bulk_size):
            GencodeTranscriptSupportDetails.insert_many(recs[idx:idx + bulk_size]).execute()


def loadResultDetailsTsv(resultDetailsTsv):
    return [tsvRowToDict(row) for row in TsvReader(resultDetailsTsv, typeMap=resultDetailsTsvTypeMap)]


def resultsTsvToDetailsPath(resultsTsv):
    " *.tsl.tsv -> *.details.tsv"
    p1 = os.path.splitext(resultsTsv)[0]
    return "{}.details.tsv".format(p1[0])


def collectResultDetails(conn, expectedTsvs):
    recs = []
    for resultsTsv in expectedTsvs:
        recs.extend(loadResultDetailsTsv(resultsTsvToDetailsPath(resultsTsv)))
    resultDetailsDbLoad(conn, recs)


def tslGencodeCollectSupportFinishJobs(opts):
    "main function"
    fileOps.ensureFileDir(opts.resultsDb)
    conn = tslConnect(opts.resultsDb, create=True, readonly=False)
    GencodeTranscriptSupport.drop_table(fail_silently=True)
    GencodeTranscriptSupport.create_table()
    GencodeTranscriptSupportDetails.drop_table(fail_silently=True)
    GencodeTranscriptSupportDetails.create_table()
    expectedTsvs = fileOps.readFileLines(os.path.join(opts.workDir, "expected.lst"))
    collectResults(conn, expectedTsvs)
    tslClose(conn)


tslGencodeCollectSupportFinishJobs(parseArgs())
