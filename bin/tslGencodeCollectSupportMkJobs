#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import sys
import os
import argparse
from pycbio.sys import fileOps
from pycbio.db import sqliteOps
from pycbio.hgdata.gencodeSqlite import GencodeAttrsSqliteTable
from gencode_icedb.general.ucscGencodeSource import GENCODE_ATTRS_TABLE


def parseArgs():
    desc = """Generate parasol jobs to collect support for all GENCODE."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--allDetails', action="store_true", default=False,
                        help="""write details for all evaluations the detailsTsv file, not just supporting ones""")
    parser.add_argument("--maxGenes", type=int, default=None,
                        help="""maximum number of genes to use, for testing""")
    parser.add_argument("--gencodeIdFile", default=None,
                        help="""file containing subset of ids""")
    parser.add_argument("--genesPerJob", type=int, default=1,
                        help="""number of genes in a job""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database""")
    parser.add_argument('evidenceDb',
                        help="""evidence sqlite3 database""")
    parser.add_argument('workDir',
                        help="""directory where jobFile and temporary results are stored""")
    return parser.parse_args()


class JobGenerator(object):
    def __init__(self, gencodeDb, evidenceDb, genesPerJob, allDetails, workDir):
        self.gencodeDb = gencodeDb
        self.evidenceDb = evidenceDb
        self.genesPerJob = genesPerJob
        self.allDetails = allDetails
        self.workDir = workDir
        self.resultDir = os.path.join(workDir, "results")
        self.suppProg = os.path.join(icedbProgSetup.binDir, "tslGencodeCollectSupportJob")

    def _generateJob(self, gencodeIds, batchFh, expectedFh):
        cmd = [self.suppProg]
        resultTsv = os.path.join(self.resultDir, "{}.tsl.tsv".format(gencodeIds[0]))
        detailsTsv = os.path.join(self.resultDir, "{}.details.tsv".format(gencodeIds[0]))
        cmd.extend([self.gencodeDb, self.evidenceDb, "--detailsTsv={}".format(detailsTsv)])
        if self.allDetails:
            cmd.append("--allDetails")
        cmd.append("{{check out exists {}}}".format(resultTsv))
        cmd.extend(gencodeIds)
        print(*cmd, file=batchFh)
        print(resultTsv, file=expectedFh)

    def generateJobs(self, gencodeIds, batchFh, expectedFh):
        iNext = 0
        while iNext < len(gencodeIds):
            self._generateJob(gencodeIds[iNext: iNext + self.genesPerJob], batchFh, expectedFh)
            iNext += self.genesPerJob


def tslGencodeCollectSupportMkJobs(opts):
    "main function"
    conn = sqliteOps.connect(opts.gencodeDb, readonly=True)
    attrsDbTable = GencodeAttrsSqliteTable(conn, GENCODE_ATTRS_TABLE)
    if opts.gencodeIdFile is not None:
        print("WARNING: subset of gencode annotations being processed", file=sys.stderr)
        gencodeIds = sorted(fileOps.readNonCommentLines(opts.gencodeIdFile))
    else:
        gencodeIds = sorted(attrsDbTable.getGeneIds())
    if opts.maxGenes is not None:
        gencodeIds = gencodeIds[0:opts.maxGenes]
    jobGen = JobGenerator(opts.gencodeDb, opts.evidenceDb, opts.genesPerJob, opts.allDetails, opts.workDir)

    fileOps.ensureDir(opts.workDir)
    batchFile = os.path.join(opts.workDir, "batch.jobs")
    expectedLst = os.path.join(opts.workDir, "expected.lst")
    with open(batchFile, "w") as batchFh, open(expectedLst, "w") as expectedFh:
        jobGen.generateJobs(gencodeIds, batchFh, expectedFh)
    conn.close()


tslGencodeCollectSupportMkJobs(parseArgs())
