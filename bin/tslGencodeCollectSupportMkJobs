#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import os
import argparse
from pycbio.sys import fileOps
from pycbio.hgdata.hgLite import sqliteConnect
from pycbio.hgdata.hgLite import GencodeAttrsDbTable
from gencode_icedb.general import gencodeDb


def parseArgs():
    desc = """Generate parasol jobs to collect support for all GENCODE."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--maxgenes", type=int, default=None,
                        help="""maximum number of genes to use, for testing""")
    parser.add_argument("--genesPerJob", type=int, default=1,
                        help="""number of genes in a job""")
    parser.add_argument('gencodeDb',
                        help="""GENCODE sqlite3 database from gencodeDbLoad""")
    parser.add_argument('evidenceDb',
                        help="""evidence sqlite3 database""")
    parser.add_argument('workDir',
                        help="""directory where jobFile and temporary results are stored""")
    return parser.parse_args()


class JobGenerator(object):
    def __init__(self, gencodeDb, evidenceDb, workDir):
        self.gencodeDb = gencodeDb
        self.evidenceDb = evidenceDb
        self.workDir = workDir
        self.resultDir = os.path.join(workDir, "results")
        self.suppProg = os.path.join(icedbProgSetup.binDir, "tslGencodeCollectSupportJob")

    def _generateJob(self, gencodeIds, batchFh, expectedFh):
        cmd = [self.suppProg]
        resultTsv = os.path.join(self.resultDir, "{}.tsl.tsv".format(gencodeIds[0]))
        detailsTsv = os.path.join(self.resultDir, "{}.details.tsv".format(gencodeIds[0]))
        cmd.extend([self.gencodeDb, self.evidenceDb, "--detailsTsv=".format(detailsTsv), "{{check out exists {}}}".format(resultTsv)])
        cmd.extend(gencodeIds)
        print(*cmd, file=batchFh)
        print(resultTsv, file=expectedFh)

    def generateJobs(self, gencodeIds, genesPerJob, batchFh, expectedFh):
        iNext = 0
        while iNext < len(gencodeIds):
            self._generateJob(gencodeIds[iNext: iNext + genesPerJob], batchFh, expectedFh)
            iNext += genesPerJob


def tslGencodeCollectSupportMkJobs(opts):
    "main function"
    conn = sqliteConnect(opts.gencodeDb, readonly=True)
    attrsDbTable = GencodeAttrsDbTable(conn, gencodeDb.GENCODE_ATTRS_TABLE)
    gencodeIds = sorted(attrsDbTable.getGeneIds())
    if opts.maxgenes is not None:
        gencodeIds = gencodeIds[0:opts.maxgenes]
    jobGen = JobGenerator(opts.gencodeDb, opts.evidenceDb, opts.workDir)

    fileOps.ensureDir(opts.workDir)
    batchFile = os.path.join(opts.workDir, "batch.jobs")
    expectedLst = os.path.join(opts.workDir, "expected.lst")
    with open(batchFile, "w") as batchFh, open(expectedLst, "w") as expectedFh:
        jobGen.generateJobs(gencodeIds, opts.genesPerJob, batchFh, expectedFh)
    conn.close()


tslGencodeCollectSupportMkJobs(parseArgs())
