#!/usr/bin/env python3
"""
Obtain cDNA alignments from an Ensembl database.
"""
import icedbProgSetup  # noqa: F401
import sys
import argparse
from pycbio.hgdata import hgDb
from pycbio.hgdata.psl import Psl, PslBlock, reverseCoords
from pycbio.hgdata.cigar import ExonerateCigar
from pycbio.db import sqliteOps
from pycbio.hgdata.pslSqlite import PslSqliteTable
from pycbio.hgdata.coords import Coords
from pycbio.sys import fileOps, loggingOps
from pycbio.db import mysqlOps
from pycbio.ncbi.assembly import AssemblyReport
import eutils.client
import MySQLdb
import MySQLdb.cursors
import logging


ensDbHost = "ensembldb.ensembl.org"
ensDbPort = 5306
ensDbUser = "anonymous"


def parseArgs():
    desc = """Fetch cDNA alignments from Ensembl and load as PSLs into an SQLite3 database.

    The Ensembl alignments don't include the poly-A and lack the lengths,
    The length of cDNA sequences are obtained from either the UCSC browser
    database or NCBI eutils API.
"""
    parser = argparse.ArgumentParser(description=desc)
    loggingOps.addCmdOptions(parser)
    parser.add_argument('--hgFixedDb', default="hgFixed",
                        help="""hgFixed database to use to get sizes""")
    parser.add_argument('--limit', type=int,
                        help="""limit on query results, used for tests""")
    parser.add_argument('--accverList',
                        help="""file with list of accession/versions to process, used for testing.""")
    parser.add_argument('--table', default="ensembl_rna_aln",
                        help="""table to load alignments""")
    parser.add_argument('--chromSpec', action="append", dest="chromSpecs", type=Coords.parse,
                        help="""Restrict to this chromosome or chromosome range (UCSC chromosome naming), maybe repeated, used for testing.""")
    parser.add_argument('ensemblCDnaDb',
                        help="""Ensembl cDNA database to use""")
    parser.add_argument('assemblyReport',
                        help="""NCBI assembly report for mapping chromosome names""")
    parser.add_argument('sqliteDb',
                        help="""database to load alignments into""")
    opts = parser.parse_args()
    loggingOps.setupFromCmd(opts, sys.argv[0])
    return opts


def ucscToEnsChroms(chromSpecs, asmReport):
    return [Coords(asmReport.ucscNameToSeqName(c.name), c.start, c.end) for c in chromSpecs]


ensCDnaAlnQuery = """SELECT
    daf.hit_name, daf.hit_strand, daf.hit_start, daf.hit_end,
    sr.name, sr.length, daf.seq_region_strand, daf.seq_region_start, daf.seq_region_end,
    daf.cigar_line
  FROM
    dna_align_feature daf, seq_region sr, external_db ed, transcript_supporting_feature tsf
  WHERE
    ((daf.seq_region_id = sr.seq_region_id)
     AND (daf.external_db_id = ed.external_db_id)
     AND (ed.db_name = "EMBL")
     AND (daf.dna_align_feature_id = tsf.feature_id)
     AND (tsf.feature_type = "dna_align_feature"))"""


class CDnaSizeFinder(object):
    "work around the fact that Ensembl doesn't have cDNA sizes"
    def __init__(self, hgFixedDb):
        self.hgFixedConn = hgDb.connect(hgFixedDb)
        self.eclient = eutils.client.Client()

    def _getSizeUcsc(self, accver):
        acc, ver = accver.split('.')
        cur = self.hgFixedConn.cursor()
        try:
            sql = """select size from gbSeq where (acc = %s) and (version = %s)"""
            cur.execute(sql, (acc, int(ver)))
            row = cur.fetchone()
            if row is None:
                return None
            else:
                return row[0]
        finally:
            cur.close()

    def _getSizeEutils(self, accver):
        esr = self.eclient.esearch(db='nuccore', term=accver)
        if len(esr.ids) == 0:
            return None
        if len(esr.ids) > 1:
            raise Exception("multiple results return for eutil query for `{}'".format(accver))
        efr = self.eclient.efetch(db='nuccore', id=esr.ids[0])
        return efr.gbseqs[0].length

    def getSize(self, accver):
        size = self._getSizeUcsc(accver)
        if size is None:
            size = self._getSizeEutils(accver)
        return size


def buildCDnaSubRangeClause(ensChromRange):
    if ensChromRange.start is None:  # whole chrom??
        return ("(sr.name = %s)",
                [ensChromRange.name])
    else:
        return ("((sr.name = %s) AND (daf.seq_region_end >= %s) AND (daf.seq_region_start <= %s))",
                [ensChromRange.name, ensChromRange.start + 1, ensChromRange.end])


def buildCDnaSubRangeClauses(ensChromRanges):
    sqlClauses = []
    sqlArgs = []
    for ensChromRange in ensChromRanges:
        ret = buildCDnaSubRangeClause(ensChromRange)
        sqlClauses.append(ret[0])
        sqlArgs.extend(ret[1])
    return "(" + " OR ".join(sqlClauses) + ")", sqlArgs


def buildCDnaQuery(limit, accverSubset, ensChromRanges):
    sql = ensCDnaAlnQuery
    sqlArgs = []
    if accverSubset is not None:
        sql += " AND (daf.hit_name in ({}))".format(",".join(len(accverSubset) * ["%s"]))
        sqlArgs += accverSubset
    if ensChromRanges is not None:
        ret = buildCDnaSubRangeClauses(ensChromRanges)
        sql += " AND " + ret[0]
        sqlArgs += ret[1]
    if limit is not None:
        sql += " LIMIT {}".format(limit)
    return sql, sqlArgs


def ensemblCDnaQuery(ensemblCDnaDb, limit=None, accverSubset=None, ensChromRanges=None):
    "generator of cDNA alignments from Ensembl"
    conn = MySQLdb.Connect(host=ensDbHost, port=ensDbPort, user=ensDbUser,
                           db=ensemblCDnaDb, cursorclass=MySQLdb.cursors.DictCursor)
    sql, sqlArgs = buildCDnaQuery(limit, accverSubset, ensChromRanges)
    try:
        cur = conn.cursor()
        cur.execute(sql, sqlArgs)
        for row in cur:
            yield row
    finally:
        conn.close()


def processCigarMatch(psl, size, qNext, tNext):
    psl.addBlock(PslBlock(qNext, tNext, size))
    psl.match += size
    return (qNext + size, tNext + size)


def processCigarInsert(psl, size, tNext):
    psl.tNumInsert += 1
    psl.tBaseInsert += size
    return tNext + size


def processCigarDelete(psl, size, qNext):
    psl.qNumInsert += 1
    psl.qBaseInsert += size
    return qNext + size


def pslFromCigar(qName, qSize, qStart, qEnd, qStrand, tName, tSize, tStart, tEnd, tStrand, cigarStr):
    "create a PSL from an Ensembl-style cigar formatted alignment"
    cigar = ExonerateCigar(cigarStr)
    psl = Psl.create(qName=qName, qSize=qSize, qStart=qStart, qEnd=qEnd,
                     tName=tName, tSize=tSize, tStart=tStart, tEnd=tEnd,
                     strand=qStrand + tStrand)

    qNext = qStart
    qBlkEnd = qEnd
    if qStrand == '-':
        qNext, qBlkEnd = reverseCoords(qNext, qBlkEnd, qSize)
    tNext = tStart
    tBlkEnd = tEnd
    if tStrand == '-':
        tNext, tBlkEnd = reverseCoords(tNext, tBlkEnd, tSize)

    for op in cigar:
        if op.aligned:
            qNext, tNext = processCigarMatch(psl, op.count, qNext, tNext)
        elif op.tinsert:
            tNext = processCigarInsert(psl, op.count, tNext)
        elif op.tdelete:
            qNext = processCigarDelete(psl, op.count, qNext)
        else:
            raise Exception("invalid CIGAR op {} in {}".format(op, cigar))

    if qNext != qBlkEnd:
        raise Exception("CIGAR length does not match aligned query range: {} {}".format(qName, cigar))
    if tNext != tBlkEnd:
        raise Exception("CIGAR length does not match aligned target range: {} {}".format(qName, cigar))
    if psl.getTStrand() == '-':
        psl = psl.reverseComplement()
    psl.strand = psl.strand[0]   # BLAT convention
    return psl


def orientToStrand(orient):
    return '-' if orient < 0 else '+'


def pslFromEnsembl(row, qSize, tName, tSize):
    return pslFromCigar(row["hit_name"], qSize, row["hit_start"] - 1, row["hit_end"], orientToStrand(row["hit_strand"]),
                        tName, tSize, row["seq_region_start"] - 1, row["seq_region_end"], orientToStrand(row["seq_region_strand"]),
                        row["cigar_line"])


class EnsemblCDnaConverter(object):
    def __init__(self, cDnaSizeFinder, asmReport):
        self.cDnaSizeFinder = cDnaSizeFinder
        self.asmReport = asmReport
        self.reportedUnmappedChrs = set()

    def _findChromInfo(self, row):
        # unplaced use GenBank acccession, some case use sequenceName with CHR_
        # prefix, which are patches embedded in full chroms, and are ignored
        chrom = row["name"]
        chromInfo = self.asmReport.bySequenceName.get(chrom)
        if chromInfo is None:
            chromInfo = self.asmReport.byGenBankAccn.get(chrom)
        if chromInfo is None:
            if (chrom not in self.reportedUnmappedChrs) and (not chrom.startswith("CHR_")):
                print("Note: Ensembl chromosome `{}' not in assembly info".format(chrom), file=sys.stderr)
                self.reportedUnmappedChrs.add(chrom)
            return None
        if chromInfo.ucscStyleName is None:
            if chrom not in self.reportedUnmappedChrs:
                print("Note: Ensembl chromosome `{}' is not mapped to an UCSC chromosome".format(row["name"]), file=sys.stderr)
                self.reportedUnmappedChrs.add(chrom)
            return None
        return chromInfo

    def _convertToPsl(self, row):
        "return psl or None"
        qSize = self.cDnaSizeFinder.getSize(row["hit_name"])
        if qSize is None:
            print("Note: UCSC and eutils esearch can't find `{}'".format(row["hit_name"]), file=sys.stderr)
            return None
        chromInfo = self._findChromInfo(row)
        if chromInfo is None:
            return None
        return pslFromEnsembl(row, qSize, chromInfo.ucscStyleName, chromInfo.sequenceLength)

    def ensemblCDnasToPsls(self, ensemblCDnaDb, limit, accverSubset, ensChromRanges):
        # use a set to ensure to avoid duplication due to alignment being in two
        # ranges
        psls = set()
        for row in ensemblCDnaQuery(ensemblCDnaDb, limit, accverSubset, ensChromRanges):
            logging.getLogger().debug("Ensembl cDNA row: {}".format(row))
            psl = self._convertToPsl(row)
            if psl is not None:
                psls.add(psl)
        return list(sorted(psls, key=lambda p: (p.tName, p.tStart, p.tEnd)))


def cdnaEnsemblAligns(opts):
    "main function"
    asmReport = AssemblyReport(opts.assemblyReport)
    converter = EnsemblCDnaConverter(CDnaSizeFinder(opts.hgFixedDb), asmReport)
    accverSubset = fileOps.readFileLines(opts.accverList) if opts.accverList is not None else None
    ensChromRanges = ucscToEnsChroms(opts.chromSpecs, asmReport) if opts.chromSpecs is not None else None
    psls = converter.ensemblCDnasToPsls(opts.ensemblCDnaDb, opts.limit, accverSubset, ensChromRanges)
    conn = sqliteOps.connect(opts.sqliteDb, create=True)
    pslDbTable = PslSqliteTable(conn, opts.table, create=True)
    pslDbTable.loads(psls)
    conn.close()


mysqlOps.mySqlSetErrorOnWarn()
cdnaEnsemblAligns(parseArgs())
