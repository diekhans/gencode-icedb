#!/usr/bin/env python3
import icedbProgSetup  # noqa: F401
import argparse
from pycbio.hgdata.genePredSqlite import GenePredSqliteTable
from pycbio.hgdata.gencodeSqlite import GencodeAttrsSqliteTable, GencodeTranscriptSourceSqliteTable, GencodeTranscriptionSupportLevelSqliteTable, GencodeTagSqliteTable
from pycbio.hgdata import hgDb
from pycbio.sys import fileOps
from pycbio.db import sqliteOps
from gencode_icedb.general import gencodeDb


def parseArgs():
    desc = """Load GENCODE genePreds and attributes into sqlite databases."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--hgdb',
                        help="""load from mysql hgdb instead of files""")
    parser.add_argument('--version',
                        help="""If specified, construct names from this version, this should include leading V or VM""")
    parser.add_argument('--attrs',
                        help="""TSV file or table of GENCODE attributes""")
    parser.add_argument('--transcriptSource',
                        help="""TSV file or table of GENCODE transcript sources""")
    parser.add_argument('--transcriptionSupportLevel',
                        help="""TSV file or table of GENCODE transcription support level scores""")
    parser.add_argument('--tags',
                        help="""TSV file or table of GENCODE tags""")
    parser.add_argument('--genes',
                        help="""file or table of genePreds to load""")
    parser.add_argument('--pseudoGenes',
                        help="""file or table of pseudo genePreds to load""")
    parser.add_argument('--transIds',
                        help="""file of transcript ids subset to load.  Only works with tables.""")
    parser.add_argument('sqliteDb',
                        help="""database to load""")
    opts = parser.parse_args()
    if opts.version is not None:
        if opts.hgdb is None:
            parser.error("--version requires --hgdb")
        if opts.attrs is None:
            opts.attrs = "wgEncodeGencodeAttrs" + opts.version
        if opts.transcriptSource is None:
            opts.transcriptSource = "wgEncodeGencodeTranscriptSource" + opts.version
        if opts.transcriptionSupportLevel is None:
            opts.transcriptionSupportLevel = "wgEncodeGencodeTranscriptionSupportLevel" + opts.version
        if opts.tags is None:
            opts.tags = "wgEncodeGencodeTag" + opts.version
        if opts.genes is None:
            opts.genes = "wgEncodeGencodeComp" + opts.version
        if opts.pseudoGenes is None:
            opts.pseudoGenes = "wgEncodeGencodePseudoGene" + opts.version
    return opts


def loadTransIds(transIdFile):
    transIdSubset = frozenset(fileOps.iterLines(transIdFile))
    if len(transIdSubset) == 0:
        raise Exception("no transcript ids found in file: {}".format(transIdFile))
    return transIdSubset


def loadHgDbTable(hgdbConn, tbl, transIdCol, transIdSubset):
    cur = hgdbConn.cursor()
    if transIdSubset is not None:
        sql = "SELECT * FROM {} WHERE {} IN ({})".format(tbl, transIdCol, ','.join(len(transIdSubset) * ['%s']))
        sqlArgs = tuple(transIdSubset)
    else:
        sql = "SELECT * FROM {}".format(tbl)
        sqlArgs = ()
    try:
        cur.execute(sql, sqlArgs)
        return cur.fetchall()
    finally:
        cur.close()


def loadAnnotations(conn, hgdbConn, genes, pseudoGenes, transIdSubset):
    annDbTable = GenePredSqliteTable(conn, gencodeDb.GENCODE_ANN_TABLE, create=True)
    if hgdbConn is not None:
        if genes is not None:
            annDbTable.loadsWithBin(loadHgDbTable(hgdbConn, genes, "name", transIdSubset))
        if pseudoGenes is not None:
            annDbTable.loadsWithBin(loadHgDbTable(hgdbConn, pseudoGenes, "name", transIdSubset))
    else:
        if genes is not None:
            annDbTable.loadGenePredFile(genes)
        if pseudoGenes is not None:
            annDbTable.loadGenePredFile(pseudoGenes)


def loadAttrs(conn, hgdbConn, attrs, transIdSubset):
    attrsDbTable = GencodeAttrsSqliteTable(conn, gencodeDb.GENCODE_ATTRS_TABLE, create=True)
    if hgdbConn is not None:
        attrsDbTable.loads(loadHgDbTable(hgdbConn, attrs, "transcriptId", transIdSubset))
    else:
        attrsDbTable.loadTsv(attrs)


def loadTransSource(conn, hgdbConn, transSource, transIdSubset):
    transSourceDbTable = GencodeTranscriptSourceSqliteTable(conn, gencodeDb.GENCODE_TRANSCRIPT_SOURCE_TABLE, create=True)
    if hgdbConn is not None:
        transSourceDbTable.loads(loadHgDbTable(hgdbConn, transSource, "transcriptId", transIdSubset))
    else:
        transSourceDbTable.loadTsv(transSource)


def loadTransSupportLevel(conn, hgdbConn, transSupportLevel, transIdSubset):
    transSourceDbTable = GencodeTranscriptionSupportLevelSqliteTable(conn, gencodeDb.GENCODE_TRANSCRIPTION_SUPPORT_LEVEL_TABLE, create=True)
    if hgdbConn is not None:
        transSourceDbTable.loads(loadHgDbTable(hgdbConn, transSupportLevel, "transcriptId", transIdSubset))
    else:
        transSourceDbTable.loadTsv(transSupportLevel)


def loadTags(conn, hgdbConn, tags, transIdSubset):
    tagsDbTable = GencodeTagSqliteTable(conn, gencodeDb.GENCODE_TAG_TABLE, create=True)
    if hgdbConn is not None:
        tagsDbTable.loads(loadHgDbTable(hgdbConn, tags, "transcriptId", transIdSubset))
    else:
        tagsDbTable.loadTsv(tags)


def ucscGencodeDbLoad(opts):
    "main function"
    transIdSubset = loadTransIds(opts.transIds) if opts.transIds is not None else None
    conn = sqliteOps.connect(opts.sqliteDb, create=True)
    hgdbConn = None
    if opts.hgdb is not None:
        hgdbConn = hgDb.connect(opts.hgdb, useAutoSqlConv=True)
    if (opts.genes is not None) or (opts.pseudoGenes is not None):
        loadAnnotations(conn, hgdbConn, opts.genes, opts.pseudoGenes, transIdSubset)
    if opts.attrs is not None:
        loadAttrs(conn, hgdbConn, opts.attrs, transIdSubset)
    if opts.transcriptSource is not None:
        loadTransSource(conn, hgdbConn, opts.transcriptSource, transIdSubset)
    if opts.transcriptionSupportLevel is not None:
        loadTransSupportLevel(conn, hgdbConn, opts.transcriptionSupportLevel, transIdSubset)
    if opts.tags is not None:
        loadTags(conn, hgdbConn, opts.tags, transIdSubset)
    if hgdbConn is not None:
        hgdbConn.close()
    conn.close()


ucscGencodeDbLoad(parseArgs())
