#!/usr/bin/env python3

import os
import sys
import re
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "../../bin"))
import icedbProgSetup  # noqa: F401
import argparse
from pycbio.sys import fileOps


def parseArgs():
    desc = """Take a Parasol job file and create a makefile to run them in a test."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('jobFile',
                        help="""Parasol jobFile""")
    parser.add_argument('makefile',
                        help="""output make file""")
    return parser.parse_args()

def parseCmd(jobCmd):
    m = re.match("^(.+ ){check out exists (.+)}(.*)$", jobCmd)
    if m is None:
        raise Exception("can't parse command: {}".format(jobCmd))
    return (m.group(1) + m.group(2) + m.group(3)), m.group(2)

def safeTargetName(target):
    """Target names containing colon don't work, so transforming them.  We
    don't ever check file name, things just get rebuild, so this is OK"""
    # FIXME: this can go away at some point
    return target.replace(':', '_')

def processCmd(jobCmd, mkfh):
    cmd, target = parseCmd(jobCmd)
    starget = safeTargetName(target)
    print("{}:".format(starget), file=mkfh)
    print("\t{}".format(cmd), file=mkfh)
    return starget

def generateMakeFile(jobFile, mkfh):
    print("all: targets", file=mkfh)
    targets = []
    for line in fileOps.iterLines(jobFile):
        targets.append(processCmd(line, mkfh))
    print("targets: {}".format(" ".join(targets)), file=mkfh)

def jobsToMake(opts):
    with open(opts.makefile, "w") as mkfh:
        generateMakeFile(opts.jobFile, mkfh)

jobsToMake(parseArgs())
