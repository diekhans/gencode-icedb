#!/usr/bin/env python3

import os
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "../../../../bin"))
import icedbProgSetup  # noqa: F401
import argparse
import pipettor
import logging
from pycbio.sys import fileOps
from testlib import TestCases


def parseArgs():
    desc = """Create test data from TSV specifying test genes.  This
    get GENCODE genePreds and evidence PSLs."""
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--debug', action="store_true", default=False,
                        help="""Enable debug logging""")
    parser.add_argument('testCaseTsv',
                        help="""TSV contain gene/transcripts to obtain.""")
    parser.add_argument('gencodeVersion',
                        help="""GENCODE version in the form V27 or VM13""")
    parser.add_argument('ucscDb',
                        help="""UCSC database for GENCODE and RNA/ESTs""")
    parser.add_argument('ensemblCDnaDb',
                        help="""Ensembl database for cDNAs""")
    parser.add_argument('assemblyReport',
                        help="""NCBI assembly report for mapping chromosome names""")
    parser.add_argument('gencodeDb',
                        help="""database to load gencode annotations into""")
    parser.add_argument('evidDbDir',
                        help="""evidence database directory""")
    return parser.parse_args()


def tslGetGenbankEvid(ucscDb, ensemblCDnaDb, assemblyReport, ranges, evidDbDir):
    pipettor.run(["tslGetGenbankEvid", ucscDb, ensemblCDnaDb, assemblyReport, evidDbDir]
                 + ["--chromSpec={}".format(str(r)) for r in ranges])


def getProblemCases(ucscDb, evidDbDir):
    tsvPre = "hs" if ucscDb.startswith("hg") else "mm"
    probTsv = os.path.join(icedbProgSetup.rootDir, "data", "{}.genbank-problem-cases.tsv".format(tsvPre))
    pipettor.run(["tslGenbankProblemCasesLoad", probTsv, evidDbDir])


def buildEvidDb(testCases, ucscDb, ensemblCDnaDb, assemblyReport, evidDbDir):
    fileOps.rmTree(evidDbDir)
    ranges = testCases.getRanges()
    tslGetGenbankEvid(ucscDb, ensemblCDnaDb, assemblyReport, ranges, evidDbDir)
    #FIXME: getProblemCases(ucscDb, evidDbDir)


def writeTransIdsTmpFile(testCases):
    transIdTmp = fileOps.tmpFileGet("transIds")
    with open(transIdTmp, 'w') as fh:
        for gene in testCases.values():
            for trans in gene:
                print(trans.transcriptId, file=fh)
    return transIdTmp


def buildGencodeDb(testCases, ucscDb, gencodeVersion, gencodeDb):
    fileOps.rmFiles(gencodeDb)
    transIdTmp = writeTransIdsTmpFile(testCases)
    cmd = ["ucscGencodeDbLoad",
           "--hgdb={}".format(ucscDb),
           "--version={}".format(gencodeVersion),
           "--transIds={}".format(transIdTmp),
           gencodeDb]
    try:
        pipettor.run(cmd)
    finally:
        os.unlink(transIdTmp)


def createTestData(opts):
    if opts.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        pipettor.setDefaultLogger(logging.getLogger())
        pipettor.setDefaultLogLevel(logging.DEBUG)
        logging.debug("Debugging enabled")  # FIXME for some reason, this is required to start output
    testCases = TestCases(opts.testCaseTsv)
    buildGencodeDb(testCases, opts.ucscDb, opts.gencodeVersion, opts.gencodeDb)
    buildEvidDb(testCases, opts.ucscDb, opts.ensemblCDnaDb, opts.assemblyReport, opts.evidDbDir)


createTestData(parseArgs())
